simplify cppcheck example
	cppcheck --enable=all --language=c --std=c99 -i autosetup --platform=unspecified -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048 -I/usr/include -I/usr/include/mit-krb5 -I. --output-file=cppcheck.xml --xml --xml-version=2 <path to neomutt source code directory>
	cppcheck --enable=all --language=c --std=c99 -i autosetup -D_POSIX_PATH_MAX=4096 -DPATH_MAX=2048  -I. --output-file=c1  .
use --check-config to list missing header files
	cppcheck --verbose --check-config --enable=all --language=c --std=c99 -i autosetup -i test -DPATH_MAX=2048 -D__x86_64__ -I. -I/usr/include -I/usr/lib/gcc/x86_64-redhat-linux/8/include -I/usr/include/qdbm --output-file=c1 .
	ignore doc dir too

fix !USE_NNTP build
	check !USE_SIDEBAR build

free functions to take (**ptr)
then deref to Type *t = *ptr;

add printf format checkers to mutt_message, mutt_debug, etc

test int against 0
	what about ALL int members?

demote to warnings
mutt_error(_("Warning: XXX"));

simplify all our:  if (X) free(X)
add doxy param doc: (NULL safe) ?

if (!(a && b))
if (!(a || b))
ag 'if \(!\(.*(&&|\|\|).*\)\)'

ag '\(!\((.*) && (.*)\)\)'
ag '\(!\((.*) \|\| (.*)\)\)'

eliminate enum AccountType?
use enum MailboxType
	what about smtp?
	add entry?

split up multiple assignments
	grep " = [^,;]* = "
	grep " = [^,;]* [!=]= "

conditional constants - reduce to a comment
	Hmm... non-functional enum entries might cause problems
	MENU_KEY_SELECT_PGP
	MENU_MIX
	MT_COLOR_DIVIDER
	MUTT_PAT_NEWSGROUPS
	MUTT_OPEN_HOOK
	REDRAW_SIDEBAR

body_copy() : move foreach param -> param_dup()

check all src against vim folding

pager
	replace CHECK_* macros with function
	bool pre_requisite(flag|flag, quiet);
	if (!pre_requisite())
		break
	need interface for index/pager operations?
	what are possible outcomes?
	break (continue loop)
	exit (function)
	fallthrough? NO refactor to avoid

replace "for (int" -> size_t in libmutt
	177 occurrences

browser.c has a lot of
	struct Email *tmp;
	tmp's a bad name for a variable
	scratch is too

move all
	if (!param)
	to start of function
	return early
	ag "^ +if \(.*\n +return"
	2540 functions
	start with libmutt?

decrypt_part - Explain r_is_signed better
	returns -1, 0, 1, 2

are these identical? YES
	static char crypt_flags(KeyFlags flags)
	static char pgp_flags(KeyFlags flags)

convert to enum?
	struct ConnAccount.type
		unsigned char type;     ///< Connection type, e.g. #MUTT_ACCT_TYPE_IMAP

config system
	can it return warnings?
	yes, but it doesn't

init.c
	getsid() is POSIX2001
	no need for #ifdef?
	exists in cygwin

variables, urgh! sendlib.c
	mutt_lookup_mime_type() int szf, sze, cur_sze;

deglobalise
	EnvList in mutt/envlist.c
	C_HiddenTags in driver_tags_add()

string fn to pretty print \t, \r, \n for tests
	handle NULL, quote string

wrong name, should be _free()
	void mutt_addrlist_clear(struct AddressList *al)
	...
	mutt_addr_free(&a);
	hmm... but it doesn't free the actual AddressList

This doesn't seem to be documented in neomutt's manual either
I wonder if we could kill this unexpected behaviour
  /* This is an undocumented feature of ELM pointed out to me by Felix von
   * Leitner <leitner@prz.fu-berlin.de> */
  if (mutt_str_strcmp(mutt_b2s(buf), ".") == 0)
    mutt_buffer_strcpy(buf, LastSaveFolder);
  else
    mutt_str_strfcpy(LastSaveFolder, mutt_b2s(buf), sizeof(LastSaveFolder));

SEND_NO_FREE_HEADER refers to an Email, SEND_NO_FREE_EMAIL?

should be _free() -> need _new() too
	void mutt_bcache_close(struct BodyCache **bcache)

flags typedef?
	/* force flags passed to mutt_mailbox_check() */
	#define MUTT_MAILBOX_CHECK_FORCE       (1 << 0)
	#define MUTT_MAILBOX_CHECK_FORCE_STATS (1 << 1)

flagify
	#define MUTT_UNBIND  1<<0
	#define MUTT_UNMACRO 1<<1

mutt_mailbox.c rename var?
	struct stat contex_sb;

rename to 'index'?
	hdrline.c
	struct HdrFormatInfo

find out meaning of "ci_" prefix, or drop it (curses interface?)
	CI_is_return
	ci_bounce_message
		bounce_message
		ci_bounce_message
		mutt_attach_bounce
		mutt_bounce_message
	ci_first_message
	ci_next_undeleted
	ci_previous_undeleted
	ci_send_message
		mix_send_message
		mutt_resend_message
		send_message

eliminate complicated macros (multiline, conditionals, many callers)
refactor complicated or oft-used macros
	index.c:144:1:       CAN_COLLAPSE     5
	pager.c:285:1:       CHECK_ACL        28
	pager.c:277:1:       CHECK_ATTACH     42
	recvattach.c:100:1:  CHECK_ATTACH     19
	compose.c:118:1:     CHECK_COUNT      32
	pager.c:261:1:       CHECK_MODE       34
	pager.c:269:1:       CHECK_READONLY
	recvattach.c:82:1:   CHECK_READONLY
	pattern.c:93:1:      CTX_MSGNO        5
	email/mime.h:85:1:   ENCODING         7
	pager.c:254:1:       IsAttach         10
	pager.c:257:1:       IsEmail          42
	pager.c:255:1:       IsMsgAttach      22
	email/mime.h:77:1:   is_multipart     8
	mutt/buffer.h:43:1:  MoreArgs         78
	mutt/regex3.h:52:1:  REG_COMP         18
	mutt/string2.h:47:1: SKIPWS           51
	state.h:56:1:        state_putc       30
	state.h:55:1:        state_puts       98
	mutt/string2.h:60:1: terminate_buffer 9
	mutt/string2.h:51:1: terminate_string 5
	email/mime.h:83:1:   TYPE             35

this typedef doesn't match the pattern for function typedefs
	keycode_t         keymap.h          /^typedef short keycode_t;$/;"

main.c
	text outside of else, search for others (over 60 comments before else)
	/* If editing the infile, keep it around afterwards so
	 * it doesn't get unlinked, and we can rebuild the draft_file */
	else

neomuttlog.vim
	offer to vim ml

needs typedef
needs NO_FLAGS
#define U_PATH          (1 << 1)

why are enum SortType numbered?
	SORT_ALPHA    =  3, ///< Required by makedoc.c
	SORT_SUBJECT  =  3, ///< Sort by the email's subject
	do we need SORT_MAX
	do we need ANY X_MAX enum values?

should use a Buffer
	void mutt_default_save(char *path, size_t pathlen, struct Email *e)
	problem: it leads to format functions that take buf, buflen

variable i used for rc and `for` loops
	static int mbox_mbox_sync(struct Mailbox *m, int *index_hint)

shellcheck hcachever.sh
	test output against various releases

move to email/body? (and rename)
	struct Body *mutt_make_multipart(struct Body *b)
	struct Body *mutt_remove_multipart(struct Body *b)
	create email/multipart.c ?

base32 doesn't belong in mutt/random.c
	maybe in mutt/string.c

config
	have macro -- VALID_PTR() for native retvals?

not closed on exit
	static FILE *fp_random;

flip to match M.verbose
	#define MUTT_QUIET         (1 << 3) ///< Do not print any messages

change to **ptr, look for others
	address_free             config/address.c
	aliaslist_free           alias/alias.c
	buffer_free              mutt/pool.c
	compress_info_free       compmbox/compress.c
	crypt_key_free           ncrypt/crypt_gpgme.c
	crypto_module_free       ncrypt/crypt_mod.c
	defs_free                gui/color.c
	driver_tags_free         email/tags.c
	key_free                 ncrypt/pgplib.c
	maildir_free             maildir/shared.c
	mbtable_free             config/mbtable.c
	menu_free                autocrypt/dlgautocrypt.c
	mhs_sequences_free       maildir/mh.c
	mix_type2_list_free      remailer.c
	monitor_check_free       monitor.c
	monitor_info_free        monitor.c
	mutt_actx_entries_free   email/attach.c
	mutt_autocrypthdr_free   email/envelope.c
	mutt_buffer_pool_free    mutt/pool.c
	mutt_color_free          gui/color.c
	mutt_envlist_free        mutt/envlist.c
	mutt_grouplist_free      address/group.c
	mutt_hash_set_destructor mutt/hash.c
	mutt_hcache_free_raw     hcache/hcache.c
	mutt_hist_free           history/history.c
	mutt_keys_free           keymap.c
	mutt_list_free           mutt/list.c
	mutt_list_free_type      mutt/list.c
	mutt_mem_free            mutt/memory.c
	mutt_opts_free           init.c
	mutt_param_free          email/parameter.c
	mutt_param_free_one      email/parameter.c
	mutt_pattern_free        pattern/compile.c
	mutt_prex_free           mutt/prex.c
	mutt_regex_free          mutt/regex.c
	mutt_regexlist_free      mutt/regex.c
	mutt_replacelist_free    mutt/regex.c
	mutt_window_free_all     gui/mutt_window.c
	mutt_winlist_free        gui/mutt_window.c
	myvarlist_free           myvar.c
	nm_db_free               notmuch/db.c
	nntp_acache_free         nntp/newsrc.c
	nntp_hashelem_free       nntp/nntp.c
	parameter_free           email/rfc2231.c
	pgp_key_free             ncrypt/pgplib.c
	pgp_uid_free             ncrypt/pgplib.c
	quotes_free              gui/color.c
	recipient_set_free       ncrypt/crypt_gpgme.c
	regex_free               config/regex.c
	slist_free               mutt/slist.c
	smime_key_free           ncrypt/smime.c
	zstrm_free               conn/zstrm.c

rename s/mutt_buffer_select_file/dlg_browser/
	factor out the 'dialog' part first

capitalisation?
	HCacheEntry
	ICommand
	MUpdate
	QClass
	MSN

MXAPI: macro fake prototypes like config
	extern struct MxOps MxImapOps;

isn't used!
	MT_COLOR_MESSAGE_LOG

'l' bad choice of param name
	First l chars of both strings are equal

xgettext: warning: msgid 'Attachment saved' is used without plural and with plural.
                   recvattach.c:647: Here is the occurrence without plural.
                   recvattach.c:822: Here is the occurrence with plural.
                   Workaround: If the msgid is a sentence, change the wording of the sentence; otherwise, use contexts for disambiguation.

menu globals, not freed on exit?
	can't find where it's freed
	char *SearchBuffers[MENU_MAX];

WRONG - depends on strlen(C_ArrowString)
	why bother for non Braille?
	cursor isn't visible
    /* move the cursor out of the way */
    if (C_ArrowCursor)
      mutt_window_move(menu->win_index, 2, menu->current - menu->top);

update copyright date

add brief README.md to each library dir
	quick description
	links to [devel] arch pages
	links to [user] dialog pages
	note
		which configure options enable the code
		build dependencies
		or push these to the code docs?

neolog vimrc, 'set wrap linebreak showbreak=\ \ \ '

build script
	if clang else gcc
	optional compiler flags

can we eliminate R_REFLOW yet?
	are ALL dialogs affected by config events?

master/main
github/upstream for flatcap repos
sync script looking for upstream remotes pull/push

#define UNUSED(x) UNUSED_ ## x __attribute__((__unused__))

unused!
 * notify_observer_add - Add an observer to an object
 * @param type        Notification type to observe, e.g. #NT_WINDOW

log_disp_terminal doesn't honour log_file_set_level(LL_DEBUG1, false);

swap.  if we're going to stop, do it before a slow operation
	while (((de = readdir(dirp))) && (SigInt != 1))

maildir_parse_flags
        case 'T': /* trashed */
          if (e->flagged && C_FlagSafe)
should set flags, then update in frontend if C_FlagSafe condition is met

copy turkish

rename params
	size_t mutt_mb_mbstowcs(wchar_t **pwbuf, size_t *pwbuflen, size_t i, char *buf);

refactor mutt_hcache_open()
  	move to separate function
	if (hcachever == 0x0) { calc; }

check all string-list config items note the separator character
	alter makedoc to use the slist flags to say:
		string list (comma-separated)
	means adding SLIST_SEP_* flags to docs/config.c

index:
	OP_MAIN_CHANGE_FOLDER vs OP_MAIN_CHANGE_FOLDER_READONLY:
	OP_MAIN_VFOLDER_FROM_QUERY vs OP_MAIN_VFOLDER_FROM_QUERY_READONLY
	vfolder READONLY isn't handled correctly, doesn't follow READONLY path

hcache/restore.c
	static struct Email *restore(const unsigned char *d)
		STAILQ_INIT(&e->tags);
		STAILQ_INIT(&e->chain);
	no nec, done by email_new()
	WRONG - while memcpy is used, STAILQ_INIT's are nec

stats_last_checked isn't set, cf upstream
	buffy.c
	629:67:      (mutt_stat_timespec_compare (sb, MUTT_STAT_MTIME, &mailbox->stats_last_checked) > 0))
	638:16:      mailbox->stats_last_checked = ctx.mtime;

bad C functions
	https://github.com/git/git/blob/master/banned.h

compose 51 case statements, many share tmp vars
	8	char buf[PATH_MAX];
	4	struct Buffer fname;

index, unnec? elim
	int attach_msg = OptAttachMsg;

pop/auth.c eliminate #ifdef DEBUG
	(nearly) only use in entire code base

docs: "delimited" lists -> "separated"

scan-build

reorg 'build' to add options conditionally on compiler

reorg .extra to build CFLAGS

refactor into ONE printf, adjust translations to just "Limit:"
    mutt_str_asprintf(&tmp_str, _("Limit: %s"), limit);
    mutt_str_asprintf(&new_title, "%s - %s", menu_name, tmp_str);

test all graphviz (and other debug) functions compile and run

use ctags to look for reserved keywords, e.g. variables called private
	then put in github action

neo-bot
	ignore (x < 100)

use `gh gist` to update local mirrors
	python scripts need to turn "private" repos into git@ urls

homepage
	cracking, mailman*2, docs:config

iwyu
	fix scripts to check for 'config.h'
	common.sh file?

look for static functions called mutt_*
	static void mutt_update_recvattach_menu()

mutt_string.c wrappers for the few mutt/string.c functions that use config

copy asan configure/bash scripts to dev page
