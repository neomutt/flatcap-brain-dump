Colours

color [attrs] object fg bg [ pattern [ num ]]

simple, regex (+backref)
AttrColor, RegexColor(List)
domains: core, compose, quoted?, sidebar, pager, index
future: alias, browser, sidebar, attach? (+icons) => patterns âˆ€

lookup by "name", e.g. config, "id" in code
completion needs list of "names"
	would need
	it would have to complete attrs

ARRAY of { name, id (or domain, id), type, flags, { AttrColor, RegexColorList }}
array fixed at startup: all registered colours
(unless plugin registers more)
one array, sorted by domain/id => bsearch
allow "name" lookup to be slow -- config only / command entry

array of { (domain, id), defn *, data * }
	defn doesn't contain the domain (does contain the id)
	abstract type for ColorId { domain, id }
	NO, callers will need the domain and the id will be local to them

ordering (least to most specific)
	1 normal			- default for *neomutt*
	2 index        (no pattern)	- default for index *window*
	3 index_column (no pattern)	- highlight entire *column*
	4 index_column   + pattern	- highlight some column *cells*
	5 index          + pattern	- highlight entire *row*

what distinguishes 4,5? columns vs row
which order should they be in?
	which is more specific?

suggest using background colours for 1,2,3,4 and foreground colours for 5?

int did = register_domain("index", did/-1) -1 => generate, define const
register_colors(did, colors[])

color simple           fg bg
color simple attr      fg bg
color simple attr attr fg bg

color regex            fg bg
color regex attr       fg bg
color regex attr attr  fg bg

color regex            fg bg regex
color regex attr       fg bg regex
color regex attr attr  fg bg regex

color regex            fg bg regex 1
color regex attr       fg bg regex 1
color regex attr attr  fg bg regex 1

afterwards compare dependencies of libcolor (#includes)

