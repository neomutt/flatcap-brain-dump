[Index Dialog] -> IndexSharedData
	struct IndexSharedData
	{
		struct ConfigSubset *sub; ///< Config set to use
		struct Context *ctx;      ///< Current Mailbox view
		struct Account *account;  ///< Current Account
		struct Mailbox *mailbox;  ///< Current Mailbox
		struct Email *email;      ///< Currently selected Email
		size_t email_seq;         ///< Sequence number of the current email
		struct Notify *notify;    ///< Notifications: #NotifyIndex, #IndexSharedData
	};

[Pager Panel] -> PagerPrivateData
	struct PagerPrivateData
	{
		struct Menu *menu;
		struct MuttWindow *win_pbar;
		struct PagerRedrawData *rd;
	};
	struct PagerRedrawData
	{
		struct PagerView *pview;
		int indexlen;
		int indicator; ///< the indicator line of the PI
		int oldtopline;
		int lines;
		int max_line;
		int last_line;
		int curline;
		int topline;
		bool force_redraw;
		int has_types;
		PagerFlags hide_quoted;
		int q_level;
		struct QClass *quote_list;
		LOFF_T last_pos;
		LOFF_T last_offset;
		struct Menu *menu; ///< the Pager Index (PI)
		regex_t search_re;
		bool search_compiled;
		PagerFlags search_flag;
		bool search_back;
		char searchbuf[256];
		struct Line *line_info;
		FILE *fp;
		struct stat sb;
	};

Pager -> Menu(mdata) -> PagerPrivateData

Pager Bar -> PBarPrivateData
	struct PBarPrivateData
	{
		struct IndexSharedData *shared; ///< Shared Index data
		struct PagerPrivateData *priv;  ///< Private Pager data
		char *pager_format;             ///< Cached status string
	};

struct PagerView
{
	struct PagerData *pdata;   ///< Data that pager displays. NOTNULL
	enum PagerMode    mode;    ///< Pager mode
	PagerFlags        flags;   ///< Additional settings to tweak pager's function
	const char       *banner;  ///< Title to display in status bar

	struct MuttWindow *win_ibar;
	struct MuttWindow *win_index;
	struct MuttWindow *win_pbar;
	struct MuttWindow *win_pager;
};

struct PagerData
{
	struct Context   *ctx;    ///< Current Mailbox context
	struct Email     *email;  ///< Current message
	struct Body      *body;   ///< Current attachment
	FILE             *fp;     ///< Source stream
	struct AttachCtx *actx;   ///< Attachment information
	const char       *fname;  ///< Name of the file to read
};
