Vertical Slice from Ctrl-L to a string being prepared
-----------------------------------------------------

// window_redraw - Reflow, recalc and repaint a tree of Windows
void window_redraw(struct MuttWindow *win)

// window_repaint - Repaint a tree of Windows
void window_repaint(struct MuttWindow *win)
  win->repaint()

// menu_repaint - Repaint the Window
int menu_repaint(struct MuttWindow *win)

// menu_redraw - Redraw the parts of the screen that have been flagged to be redrawn
int menu_redraw(struct Menu *menu)

// menu_redraw_current - Redraw the current menu
void menu_redraw_current(struct Menu *menu)
  menu->make_entry()

// index_make_entry - Format an Email for the Menu
void index_make_entry(struct Menu *menu, int line, struct Buffer *buf)

// mutt_make_string - Create formatted strings using mailbox expandos
void mutt_make_string(struct Buffer *buf, int cols, const char *s, struct Mailbox *m, int inpgr, struct Email *e, MuttFormatFlags flags, const char *progress)
  expando_render(IndexRenderData)

// expando_render - Render an Expando + data into a string
void expando_render(char *buf, size_t buflen, int cols, const struct Expando *exp, const struct ExpandoRenderData *rdata, void *data, MuttFormatFlags flags)
  format_tree(IndexRenderData);

// format_tree - XXX
void format_tree(struct ExpandoNode **tree, const struct ExpandoRenderData *rdata, char *buf, size_t buf_len, size_t col_len, void *data, MuttFormatFlags flags)
  IndexRenderData.callback()

// index_i - Message ID
int index_i(const struct ExpandoNode *node, char *buf, int buf_len, int cols_len, void *data, MuttFormatFlags flags)

// format_string_simple - XXX
void format_string_simple(char *buf, int buf_len, const char *s, const struct ExpandoNode *node)

// format_string - XXX
void format_string(char *buf, int buf_len, const char *s, MuttFormatFlags flags, enum ColorId pre, enum ColorId post, const struct ExpandoNode *node, enum HasTreeChars has_tree)

// mutt_simple_format - Format a string, like snprintf()
void mutt_simple_format(char *buf, size_t buflen, int min_width, int max_width, enum FormatJustify justify, char pad_char, const char *s, size_t n, bool arboreal)

// vim: syn=c
