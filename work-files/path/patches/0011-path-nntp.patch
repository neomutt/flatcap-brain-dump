From 996e0d8e86481b55e045677d4ad913480d9232ab Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 21 Feb 2020 01:16:19 +0000
Subject: [PATCH 11/29] path: nntp

---
 Makefile.autosetup      |   3 +-
 nntp/lib.h              |   2 +
 nntp/nntp.c             |  93 +++++++++++++++
 nntp/path.c             | 244 +++++++++++++++++++++++++++++++++++++++
 nntp/path.h             |  36 ++++++
 nntp/private.h          |   8 +-
 po/POTFILES.in          |   1 +
 test/Makefile.autosetup |   1 +
 test/main.c             |   8 ++
 test/mx_path/nntp.c     | 247 ++++++++++++++++++++++++++++++++++++++++
 10 files changed, 640 insertions(+), 3 deletions(-)
 create mode 100644 nntp/path.c
 create mode 100644 nntp/path.h
 create mode 100644 test/mx_path/nntp.c

diff --git a/Makefile.autosetup b/Makefile.autosetup
index 3e3a250a0..334e9284a 100644
--- a/Makefile.autosetup
+++ b/Makefile.autosetup
@@ -429,7 +429,7 @@ $(PWD)/ncrypt:
 ###############################################################################
 # libnntp
 LIBNNTP=	libnntp.a
-LIBNNTPOBJS=	nntp/browse.o nntp/complete.o nntp/newsrc.o nntp/nntp.o
+LIBNNTPOBJS=	nntp/browse.o nntp/complete.o nntp/newsrc.o nntp/nntp.o nntp/path.o
 CLEANFILES+=	$(LIBNNTP) $(LIBNNTPOBJS)
 ALLOBJS+=	$(LIBNNTPOBJS)
 
@@ -618,6 +618,7 @@ coverage: all test
 	  --directory imap \
 	  --directory maildir \
 	  --directory mbox \
+	  --directory nntp \
 
 	-genhtml --output-directory lcov --frames lcov.info
 	lcov --list lcov.info
diff --git a/nntp/lib.h b/nntp/lib.h
index c665283fb..ba80bd052 100644
--- a/nntp/lib.h
+++ b/nntp/lib.h
@@ -33,6 +33,7 @@
  * | nntp/complete.c | @subpage nntp_complete |
  * | nntp/newsrc.c   | @subpage nntp_newsrc   |
  * | nntp/nntp.c     | @subpage nntp_nntp     |
+ * | nntp/path.c     | @subpage nntp_path     |
  */
 
 #ifndef MUTT_NNTP_LIB_H
@@ -46,6 +47,7 @@
 #include "core/lib.h"
 #include "format_flags.h"
 #include "mx.h"
+#include "path.h"
 
 struct ConnAccount;
 struct stat;
diff --git a/nntp/nntp.c b/nntp/nntp.c
index bd4eca520..65f374f53 100644
--- a/nntp/nntp.c
+++ b/nntp/nntp.c
@@ -55,6 +55,7 @@
 #include "mutt_socket.h"
 #include "muttlib.h"
 #include "mx.h"
+#include "path.h"
 #include "progress.h"
 #include "sort.h"
 #include "bcache/lib.h"
@@ -2876,6 +2877,92 @@ static int nntp_path_parent(char *buf, size_t buflen)
   return 0;
 }
 
+/**
+ * nntp_ac2_is_owner - Does this Account own this Path? - Implements MxOps::ac2_is_owner()
+ */
+static int nntp_ac2_is_owner(struct Account *a, const struct Path *path)
+{
+  if (a->type != MUTT_NNTP)
+    return -1;
+
+  struct Url *url = url_parse(path->orig);
+  struct NntpAccountData *adata = a->adata;
+  struct ConnAccount *cac = &adata->conn->account;
+  int rc = -1;
+
+  if (mutt_str_strcasecmp(cac->host, url->host) != 0)
+    goto done;
+  if (!path_partial_match_string(cac->user, url->user))
+    goto done;
+  if (!path_partial_match_string(cac->pass, url->pass))
+    goto done;
+  if (!path_partial_match_number(cac->port, url->port))
+    goto done;
+
+  rc = 0;
+
+done:
+  url_free(&url);
+  return rc;
+}
+
+/**
+ * nntp_path2_canon_wrapper - Canonicalise a Mailbox path - Implements MxOps::path2_canon()
+ */
+static int nntp_path2_canon_wrapper(struct Path *path)
+{
+  struct Account *np = NULL;
+  TAILQ_FOREACH(np, &NeoMutt->accounts, entries)
+  {
+    if (nntp_ac2_is_owner(np, path) == 0)
+      break;
+  }
+
+  if (!np)
+    return -1;
+
+  struct NntpAccountData *adata = np->adata;
+  struct ConnAccount *cac = &adata->conn->account;
+
+  return nntp_path2_canon(path, cac->user, cac->port);
+}
+
+/**
+ * nntp_path2_parent_wrapper - Find the parent of a Mailbox path - Implements MxOps::path2_parent()
+ * @retval  1 Success, path is root, it has no parent
+ * @retval  0 Success, parent returned
+ * @retval -1 Error
+ */
+int nntp_path2_parent_wrapper(const struct Path *path, struct Path **parent)
+{
+  struct Path *tmp_parent = NULL;
+
+  // First generate the parent's path
+  int rc = nntp_path2_parent(path, &tmp_parent);
+  if (rc != 0)
+    return -1;
+
+  struct Account *np = NULL;
+  TAILQ_FOREACH(np, &NeoMutt->accounts, entries)
+  {
+    if (nntp_ac2_is_owner(np, path) == 0)
+      break;
+  }
+
+  if (!np)
+    return -1;
+
+  struct NntpAccountData *adata = np->adata;
+
+  // Check if new path exists
+  struct NntpMboxData *mdata = mutt_hash_find(adata->groups_hash, tmp_parent->orig);
+  if (!mdata)
+    return -1;
+
+  *parent = tmp_parent;
+  return 0;
+}
+
 // clang-format off
 /**
  * MxNntpOps - NNTP Mailbox - Implements ::MxOps
@@ -2904,5 +2991,11 @@ struct MxOps MxNntpOps = {
   .path_canon       = nntp_path_canon,
   .path_pretty      = nntp_path_pretty,
   .path_parent      = nntp_path_parent,
+  .path2_canon      = nntp_path2_canon_wrapper,
+  .path2_compare    = nntp_path2_compare,
+  .path2_parent     = nntp_path2_parent_wrapper,
+  .path2_pretty     = nntp_path2_pretty,
+  .path2_probe      = nntp_path2_probe,
+  .path2_tidy       = nntp_path2_tidy,
 };
 // clang-format on
diff --git a/nntp/path.c b/nntp/path.c
new file mode 100644
index 000000000..cf8e7c319
--- /dev/null
+++ b/nntp/path.c
@@ -0,0 +1,244 @@
+/**
+ * @file
+ * Nntp path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * @page nntp_path Nntp path manipulations
+ *
+ * Nntp path manipulations
+ */
+
+#include "config.h"
+#include <string.h>
+#include "config/lib.h"
+#include "email/lib.h"
+#include "core/lib.h"
+
+extern char *HomeDir;
+
+/**
+ * nntp_path2_canon - Canonicalise a Mailbox path - Implements MxOps::path2_canon()
+ * @param path Path to canonicalise
+ * @param user Login username
+ * @param port Server port
+ * @retval  0 Success
+ * @retval -1 Failure
+ */
+int nntp_path2_canon(struct Path *path, char *user, int port)
+{
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    return -1;
+
+  if (!url->user)
+    url->user = user;
+  if (url->port == 0)
+    url->port = port;
+  if (url->pass)
+    url->pass = NULL;
+
+  int rc = -1;
+  struct Buffer buf = mutt_buffer_make(256);
+  if (url_tobuffer(url, &buf, 0) != 0)
+    goto done; // LCOV_EXCL_LINE
+
+  mutt_str_replace(&path->canon, mutt_b2s(&buf));
+  path->flags |= MPATH_CANONICAL;
+  rc = 0;
+
+done:
+  url_free(&url);
+  mutt_buffer_dealloc(&buf);
+  return rc;
+}
+
+/**
+ * nntp_path2_compare - Compare two Mailbox paths - Implements MxOps::path2_compare()
+ *
+ * **Tests**
+ * - scheme must match
+ * - host must match
+ * - user must match, or may be absent from one, or absent from both
+ * - pass must match, or may be absent from one, or absent from both
+ * - port must match, or may be absent from one, or absent from both
+ * - path must match
+ */
+int nntp_path2_compare(struct Path *path1, struct Path *path2)
+{
+  struct Url *url1 = url_parse(path1->canon);
+  struct Url *url2 = url_parse(path2->canon);
+
+  int rc = url1->scheme - url2->scheme;
+  if (rc != 0)
+    goto done;
+
+  if (url1->user && url2->user)
+  {
+    rc = mutt_str_strcmp(url1->user, url2->user);
+    if (rc != 0)
+      goto done;
+  }
+
+  rc = mutt_str_strcasecmp(url1->host, url2->host);
+  if (rc != 0)
+    goto done;
+
+  if ((url1->port != 0) && (url2->port != 0))
+  {
+    rc = url1->port - url2->port;
+    if (rc != 0)
+      goto done;
+  }
+
+  rc = mutt_str_strcmp(url1->path, url2->path);
+
+done:
+  url_free(&url1);
+  url_free(&url2);
+  if (rc < 0)
+    return -1;
+  if (rc > 0)
+    return 1;
+  return 0;
+}
+
+/**
+ * nntp_path2_parent - Find the parent of a Mailbox path - Implements MxOps::path2_parent()
+ * @retval  1 Success, path is root, it has no parent
+ * @retval  0 Success, parent returned
+ * @retval -1 Error
+ */
+int nntp_path2_parent(const struct Path *path, struct Path **parent)
+{
+  int rc = -1;
+  struct Buffer *buf = NULL;
+
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    return -2;
+
+  char *split = strrchr(url->path, '.');
+  if (!split)
+    goto done;
+
+  *split = '\0';
+
+  buf = mutt_buffer_pool_get();
+  if (url_tobuffer(url, buf, 0) < 0)
+    goto done; // LCOV_EXCL_LINE
+
+  *parent = mutt_path_new();
+  (*parent)->orig = mutt_str_strdup(mutt_b2s(buf));
+  (*parent)->type = path->type;
+  (*parent)->flags = MPATH_RESOLVED | MPATH_TIDY;
+
+  rc = 0;
+
+done:
+  url_free(&url);
+  mutt_buffer_pool_release(&buf);
+  return rc;
+}
+
+/**
+ * nntp_path2_pretty - Abbreviate a Mailbox path - Implements MxOps::path2_pretty()
+ *
+ * **Tests**
+ * - scheme must match
+ * - host must match
+ * - user must match, or may be absent from one, or absent from both
+ * - pass must match, or may be absent from one, or absent from both
+ * - port must match, or may be absent from one, or absent from both
+ */
+int nntp_path2_pretty(struct Path *path, const char *folder)
+{
+  int rc = 0;
+  struct Url *url1 = url_parse(path->orig);
+  struct Url *url2 = url_parse(folder);
+
+  if (url1->scheme != url2->scheme)
+    goto done;
+  if (mutt_str_strcasecmp(url1->host, url2->host) != 0)
+    goto done;
+  if (!path_partial_match_string(url1->user, url2->user))
+    goto done;
+  if (!path_partial_match_number(url1->port, url2->port))
+    goto done;
+  if (!mutt_path2_abbr_folder(url1->path, url2->path, &path->pretty))
+    goto done;
+
+  rc = 1;
+
+done:
+  url_free(&url1);
+  url_free(&url2);
+  return rc;
+}
+
+/**
+ * nntp_path2_probe - Does this Mailbox type recognise this path? - Implements MxOps::path2_probe()
+ *
+ * **Tests**
+ * - Path may begin "news://"
+ * - Path may begin "snews://"
+ *
+ * @note The case of the URL scheme is ignored
+ */
+int nntp_path2_probe(struct Path *path, const struct stat *st)
+{
+  if (!mutt_str_startswith(path->orig, "news://", CASE_IGNORE) &&
+      !mutt_str_startswith(path->orig, "snews://", CASE_IGNORE))
+  {
+    return -1;
+  }
+
+  path->type = MUTT_NNTP;
+  return 0;
+}
+
+/**
+ * nntp_path2_tidy - Tidy a Mailbox path - Implements MxOps::path2_tidy()
+ *
+ * **Changes**
+ * - Lowercase the URL scheme
+ */
+int nntp_path2_tidy(struct Path *path)
+{
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    return -1;
+
+  url->pass = NULL;
+
+  int rc = -1;
+  struct Buffer *buf = mutt_buffer_pool_get();
+  if (url_tobuffer(url, buf, 0) < 0)
+    goto done; // LCOV_EXCL_LINE
+
+  mutt_str_replace(&path->orig, mutt_b2s(buf));
+  path->flags |= MPATH_TIDY;
+  rc = 0;
+
+done:
+  url_free(&url);
+  mutt_buffer_pool_release(&buf);
+  return rc;
+}
diff --git a/nntp/path.h b/nntp/path.h
new file mode 100644
index 000000000..bd1c03ae3
--- /dev/null
+++ b/nntp/path.h
@@ -0,0 +1,36 @@
+/**
+ * @file
+ * Nntp path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MUTT_NNTP_PATH_H
+#define MUTT_NNTP_PATH_H
+
+struct Path;
+struct stat;
+
+int nntp_path2_canon  (struct Path *path, char *user, int port);
+int nntp_path2_compare(struct Path *path1, struct Path *path2);
+int nntp_path2_parent (const struct Path *path, struct Path **parent);
+int nntp_path2_pretty (struct Path *path, const char *folder);
+int nntp_path2_probe  (struct Path *path, const struct stat *st);
+int nntp_path2_tidy   (struct Path *path);
+
+#endif /* MUTT_NNTP_PATH_H */
diff --git a/nntp/private.h b/nntp/private.h
index dff959663..6a6321901 100644
--- a/nntp/private.h
+++ b/nntp/private.h
@@ -1,9 +1,9 @@
 /**
  * @file
- * Usenet network mailbox type; talk to an NNTP server
+ * Shared constants/structs that are private to Nntp
  *
  * @authors
- * Copyright (C) 2018 Richard Russon <rich@flatcap.org>
+ * Copyright (C) 2018-2020 Richard Russon <rich@flatcap.org>
  *
  * @copyright
  * This program is free software: you can redistribute it and/or modify it under
@@ -24,12 +24,16 @@
 #define MUTT_NNTP_PRIVATE_H
 
 #include <stdint.h>
+#include "core/lib.h"
+#include "hcache/lib.h"
 #include "lib.h"
 #include "hcache/lib.h"
 
 struct Connection;
 struct Email;
 struct Mailbox;
+struct Path;
+struct stat;
 
 #define NNTP_PORT 119
 #define NNTP_SSL_PORT 563
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 7361a5ced..8e871d19d 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -187,6 +187,7 @@ nntp/browse.c
 nntp/complete.c
 nntp/newsrc.c
 nntp/nntp.c
+nntp/path.c
 notmuch/db.c
 notmuch/notmuch.c
 opcodes.c
diff --git a/test/Makefile.autosetup b/test/Makefile.autosetup
index bac8e1cd1..bf0418693 100644
--- a/test/Makefile.autosetup
+++ b/test/Makefile.autosetup
@@ -344,6 +344,7 @@ MX_PATH_OBJS	= test/mx_path/compmbox.o \
 		  test/mx_path/imap.o \
 		  test/mx_path/maildir.o \
 		  test/mx_path/mbox.o \
+		  test/mx_path/nntp.o \
 
 PARAMETER_OBJS	= test/parameter/mutt_param_cmp_strict.o \
 		  test/parameter/mutt_param_delete.o \
diff --git a/test/main.c b/test/main.c
index deb164180..27bf54a6c 100644
--- a/test/main.c
+++ b/test/main.c
@@ -413,6 +413,14 @@
   NEOMUTT_TEST_ITEM(test_neomutt_mailboxlist_get_all)                          \
   NEOMUTT_TEST_ITEM(test_neomutt_new)                                          \
                                                                                \
+  /* nntp */                                                                   \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_canon)                                     \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_compare)                                   \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_parent)                                    \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_pretty)                                    \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_probe)                                     \
+  NEOMUTT_TEST_ITEM(test_nntp_path2_tidy)                                      \
+                                                                               \
   /* notify */                                                                 \
   NEOMUTT_TEST_ITEM(test_notify_free)                                          \
   NEOMUTT_TEST_ITEM(test_notify_new)                                           \
diff --git a/test/mx_path/nntp.c b/test/mx_path/nntp.c
new file mode 100644
index 000000000..f0a04622d
--- /dev/null
+++ b/test/mx_path/nntp.c
@@ -0,0 +1,247 @@
+/**
+ * @file
+ * Test code for the NNTP MxOps Path functions
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#define TEST_NO_MAIN
+#include "config.h"
+#include "acutest.h"
+#include <string.h>
+#include <sys/stat.h>
+#include "mutt/lib.h"
+#include "core/lib.h"
+#include "common.h"
+#include "nntp/path.h"
+
+void test_nntp_path2_canon(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "news://user@example.com:123/alt.apple",        "news://user@example.com:123/alt.apple",  0 },
+    { "junk://user@example.com:123/alt.apple",        "junk://user@example.com:123/alt.apple", -1 },
+    { "news://example.com:123/alt.apple",             "news://user@example.com:123/alt.apple",  0 },
+    { "news://user@example.com/alt.apple",            "news://user@example.com:123/alt.apple",  0 },
+    { "news://user:secret@example.com:123/alt.apple", "news://user@example.com:123/alt.apple",  0 },
+    { "news://example.com/alt.apple",                 "news://user@example.com:123/alt.apple",  0 },
+  };
+  // clang-format on
+
+  struct Path path = { 0 };
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path.orig = (char *) tests[i].first;
+    path.canon = (char *) mutt_str_strdup(tests[i].first);
+    TEST_CASE(path.orig);
+    path.type = MUTT_NNTP;
+    path.flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL;
+
+    rc = nntp_path2_canon(&path, "user", 123);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.flags & MPATH_CANONICAL);
+      TEST_CHECK(path.canon != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.canon, tests[i].second) == 0);
+    }
+    FREE(&path.canon);
+  }
+}
+
+void test_nntp_path2_compare(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "news://user@example.com:123/INBOX",        "news://user@example.com:123/INBOX",        0 }, // Match
+    { "news://user@example.com:123/INBOX",        "snews://user@example.com:123/INBOX",      -1 }, // Scheme differs
+    { "snews://user@example.com:123/INBOX",       "news://user@example.com:123/INBOX",        1 }, // Scheme differs
+    { "news://adam@example.com:123/INBOX",        "news://zach@example.com:123/INBOX",       -1 }, // User differs
+    { "news://zach@example.com:123/INBOX",        "news://adam@example.com:123/INBOX",        1 }, // User differs
+    { "news://adam@example.com:123/INBOX",        "news://example.com:123/INBOX",             0 }, // User missing
+    { "news://adam:secret@example.com:123/INBOX", "news://adam:magic@example.com:123/INBOX",  0 }, // Password ignored
+    { "news://user@example.com:123/INBOX",        "news://user@flatcap.org:123/INBOX",       -1 }, // Host differs
+    { "news://user@flatcap.org:123/INBOX",        "news://user@example.com:123/INBOX",        1 }, // Host differs
+    { "news://user@example.com:123/INBOX",        "news://user@example.com:456/INBOX",       -1 }, // Port differs
+    { "news://user@example.com:456/INBOX",        "news://user@example.com:123/INBOX",        1 }, // Port differs
+    { "news://user@example.com:456/INBOX",        "news://user@example.com/INBOX",            0 }, // Port missing
+    { "news://user@example.com:123/INBOX",        "news://user@example.com:123/junk",        -1 }, // Path differs
+    { "news://user@example.com:123/junk",         "news://user@example.com:123/INBOX",        1 }, // Path differs
+  };
+  // clang-format on
+
+  struct Path path1 = {
+    .type = MUTT_NNTP,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+  struct Path path2 = {
+    .type = MUTT_NNTP,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path1.canon = (char *) tests[i].first;
+    TEST_CASE(path1.canon);
+
+    path2.canon = (char *) tests[i].second;
+    TEST_CASE(path2.canon);
+
+    rc = nntp_path2_compare(&path1, &path2);
+    TEST_CHECK(rc == tests[i].retval);
+  }
+}
+
+void test_nntp_path2_parent(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "news://example.com/apple.banana.cherry", "news://example.com/apple.banana",  0 },
+    { "news://example.com/apple.banana",        "news://example.com/apple",         0 },
+    { "news://example.com/apple",               NULL,                              -1 },
+    { "news://example.com/",                    NULL,                              -1 },
+    { "junk://example.com/",                    NULL,                              -2 },
+  };
+  // clang-format on
+
+  struct Path path = {
+    .type = MUTT_NNTP,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  struct Path *parent = NULL;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path.orig = (char *) tests[i].first;
+    TEST_CASE(path.orig);
+
+    rc = nntp_path2_parent(&path, &parent);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(parent != NULL);
+      TEST_CHECK(parent->orig != NULL);
+      TEST_CHECK(parent->type == path.type);
+      TEST_CHECK(parent->flags & MPATH_RESOLVED);
+      TEST_CHECK(parent->flags & MPATH_TIDY);
+      TEST_CHECK(mutt_str_strcmp(parent->orig, tests[i].second) == 0);
+      mutt_path_free(&parent);
+    }
+  }
+}
+
+void test_nntp_path2_pretty(void)
+{
+  static const char *folder = "news://user@example.com:123/";
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "news://example.com/alt.apple",         "+alt.apple", 1 },
+    { "snews://example.com/alt.apple",        NULL,         0 }, // Scheme differs
+    { "news://flatcap.org/alt.apple",         NULL,         0 }, // Host differs
+    { "news://another@example.com/alt.apple", NULL,         0 }, // User differs
+    { "news://example.com:456/alt.apple",     NULL,         0 }, // Port differs
+    { "news://example.com/",                  NULL,         0 }, // Folder is entire path
+  };
+  // clang-format on
+
+  struct Path path = {
+    .type = MUTT_NNTP,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path.orig = (char *) tests[i].first;
+    TEST_CASE(path.orig);
+
+    rc = nntp_path2_pretty(&path, folder);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc > 0)
+    {
+      TEST_CHECK(path.pretty != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.pretty, tests[i].second) == 0);
+    }
+  }
+}
+
+void test_nntp_path2_probe(void)
+{
+  // clang-format off
+  static const struct TestValue tests[] = {
+    { "news://example.com/",  NULL,  0 },
+    { "snews://example.com/", NULL,  0 },
+    { "imap://example.com/",  NULL, -1 },
+  };
+  // clang-format on
+
+  struct Path path = { 0 };
+  struct stat st;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path.orig = (char *) tests[i].first;
+    TEST_CASE(path.orig);
+    path.type = MUTT_UNKNOWN;
+    path.flags = MPATH_NO_FLAGS;
+    memset(&st, 0, sizeof(st));
+    stat(path.orig, &st);
+    rc = nntp_path2_probe(&path, &st);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.type > MUTT_UNKNOWN);
+    }
+  }
+}
+
+void test_nntp_path2_tidy(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "news://example.com/alt.apple", "news://example.com/alt.apple",  0 },
+    { "NEWS://example.com/alt.apple", "news://example.com/alt.apple",  0 },
+    { "junk://example.com/",          "junk://example.com/",          -1 },
+  };
+  // clang-format on
+
+  struct Path path = {
+    .type = MUTT_NNTP,
+    .flags = MPATH_RESOLVED,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    path.orig = mutt_str_strdup(tests[i].first);
+    TEST_CASE(path.orig);
+
+    rc = nntp_path2_tidy(&path);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.orig != NULL);
+      TEST_CHECK(path.flags & MPATH_TIDY);
+      TEST_CHECK(mutt_str_strcmp(path.orig, tests[i].second) == 0);
+    }
+    FREE(&path.orig);
+  }
+}
