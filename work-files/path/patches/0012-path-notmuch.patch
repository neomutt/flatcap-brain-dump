From f5ac05cbcb2f04a54f88e941134c35d2d0c41cd6 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 21 Feb 2020 01:17:57 +0000
Subject: [PATCH 12/29] path: notmuch

---
 Makefile.autosetup      |   3 +-
 notmuch/lib.h           |   2 +
 notmuch/notmuch.c       |  12 +-
 notmuch/path.c          | 277 ++++++++++++++++++++++++++++++++++++++++
 notmuch/path.h          |  36 ++++++
 notmuch/private.h       |  12 +-
 po/POTFILES.in          |   1 +
 test/Makefile.autosetup |   4 +
 test/main.c             |  15 +++
 test/mx_path/notmuch.c  | 267 ++++++++++++++++++++++++++++++++++++++
 10 files changed, 617 insertions(+), 12 deletions(-)
 create mode 100644 notmuch/path.c
 create mode 100644 notmuch/path.h
 create mode 100644 test/mx_path/notmuch.c

diff --git a/Makefile.autosetup b/Makefile.autosetup
index 334e9284a..242740012 100644
--- a/Makefile.autosetup
+++ b/Makefile.autosetup
@@ -443,7 +443,7 @@ $(PWD)/nntp:
 # libnotmuch
 @if USE_NOTMUCH
 LIBNOTMUCH=	libnotmuch.a
-LIBNOTMUCHOBJS=	notmuch/notmuch.o notmuch/db.o
+LIBNOTMUCHOBJS=	notmuch/notmuch.o notmuch/db.o notmuch/path.o
 CLEANFILES+=	$(LIBNOTMUCH) $(LIBNOTMUCHOBJS)
 ALLOBJS+=	$(LIBNOTMUCHOBJS)
 
@@ -619,6 +619,7 @@ coverage: all test
 	  --directory maildir \
 	  --directory mbox \
 	  --directory nntp \
+	  --directory notmuch \
 
 	-genhtml --output-directory lcov --frames lcov.info
 	lcov --list lcov.info
diff --git a/notmuch/lib.h b/notmuch/lib.h
index c7309ff4c..67a892761 100644
--- a/notmuch/lib.h
+++ b/notmuch/lib.h
@@ -29,6 +29,7 @@
  * | :--------------------- | :------------------ |
  * | notmuch/mutt_notmuch.c | @subpage nm_notmuch |
  * | notmuch/nm_db.c        | @subpage nm_db      |
+ * | notmuch/path.c         | @subpage nm_path    |
  */
 
 #ifndef MUTT_NOTMUCH_LIB_H
@@ -38,6 +39,7 @@
 #include <stdbool.h>
 #include "core/lib.h"
 #include "mx.h"
+#include "path.h"
 
 struct Email;
 struct NmMboxData;
diff --git a/notmuch/notmuch.c b/notmuch/notmuch.c
index 25d531493..0f0db5735 100644
--- a/notmuch/notmuch.c
+++ b/notmuch/notmuch.c
@@ -63,16 +63,12 @@
 #include "index.h"
 #include "mutt_thread.h"
 #include "mx.h"
+#include "path.h"
 #include "progress.h"
 #include "protos.h"
 #include "hcache/lib.h"
 #include "maildir/lib.h"
 
-struct stat;
-
-const char NmUrlProtocol[] = "notmuch://";
-const int NmUrlProtocolLen = sizeof(NmUrlProtocol) - 1;
-
 /* These Config Variables are only used in notmuch/mutt_notmuch.c */
 int C_NmDbLimit;       ///< Config: (notmuch) Default limit for Notmuch queries
 char *C_NmDefaultUrl;  ///< Config: (notmuch) Path to the Notmuch database
@@ -2604,5 +2600,11 @@ struct MxOps MxNotmuchOps = {
   .path_canon       = nm_path_canon,
   .path_pretty      = nm_path_pretty,
   .path_parent      = nm_path_parent,
+  .path2_canon      = nm_path2_canon,
+  .path2_compare    = nm_path2_compare,
+  .path2_parent     = nm_path2_parent,
+  .path2_pretty     = nm_path2_pretty,
+  .path2_probe      = nm_path2_probe,
+  .path2_tidy       = nm_path2_tidy,
 };
 // clang-format on
diff --git a/notmuch/path.c b/notmuch/path.c
new file mode 100644
index 000000000..d344fa56e
--- /dev/null
+++ b/notmuch/path.c
@@ -0,0 +1,277 @@
+/**
+ * @file
+ * Notmuch path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * @page nm_path Notmuch path manipulations
+ *
+ * Notmuch path manipulations
+ */
+
+#include "config.h"
+#include <limits.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include "private.h"
+#include "config/lib.h"
+#include "email/lib.h"
+#include "core/lib.h"
+
+extern char *HomeDir;
+
+const char NmUrlProtocol[] = "notmuch://";
+const int NmUrlProtocolLen = sizeof(NmUrlProtocol) - 1;
+
+/**
+ * qsort_urlquery_cb - Sort two UrlQuery pointers
+ * @param a First UrlQuery
+ * @param b Second UrlQuery
+ * @retval -1 a precedes b
+ * @retval  0 a and b are identical
+ * @retval  1 b precedes a
+ */
+int qsort_urlquery_cb(const void *a, const void *b)
+{
+  const struct UrlQuery *uq1 = *(struct UrlQuery const *const *) a;
+  const struct UrlQuery *uq2 = *(struct UrlQuery const *const *) b;
+
+  int rc = mutt_str_strcmp(uq1->name, uq2->name);
+  if (rc != 0)
+    return rc;
+
+  return mutt_str_strcmp(uq1->value, uq2->value);
+}
+
+/**
+ * nm_path2_canon - Canonicalise a Mailbox path - Implements MxOps::path2_canon()
+ */
+int nm_path2_canon(struct Path *path)
+{
+  int rc = -1;
+
+  struct Buffer buf = mutt_buffer_make(256);
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    goto done;
+
+  if (url->scheme != U_NOTMUCH)
+    goto done;
+
+  // follow symlinks in db path
+  char real[PATH_MAX] = { 0 };
+  if (!realpath(url->path, real))
+    goto done;
+  url->path = real;
+
+  size_t count = 0;
+  struct UrlQuery *np = NULL;
+  STAILQ_FOREACH(np, &url->query_strings, entries)
+  {
+    count++;
+  }
+
+  struct UrlQuery **all_query = mutt_mem_calloc(count, sizeof(struct UrlQuery *));
+  struct UrlQuery *tmp = NULL;
+  count = 0;
+  STAILQ_FOREACH_SAFE(np, &url->query_strings, entries, tmp)
+  {
+    STAILQ_REMOVE_HEAD(&url->query_strings, entries);
+    all_query[count++] = np;
+  }
+
+  qsort(all_query, count, sizeof(struct UrlQuery *), qsort_urlquery_cb);
+
+  for (size_t i = 0; i < count; i++)
+  {
+    STAILQ_INSERT_TAIL(&url->query_strings, all_query[i], entries);
+  }
+  FREE(&all_query);
+
+  url->host = "/";
+  if (url_tobuffer(url, &buf, U_PATH) != 0)
+    goto done; // LCOV_EXCL_LINE
+
+  mutt_str_replace(&path->canon, mutt_b2s(&buf));
+  path->flags |= MPATH_CANONICAL;
+  rc = 0;
+
+done:
+  url_free(&url);
+  mutt_buffer_dealloc(&buf);
+  return rc;
+}
+
+/**
+ * nm_path2_compare - Compare two Mailbox paths - Implements MxOps::path2_compare()
+ *
+ * **Tests**
+ * - path must match, or may be absent from one, or absent from both
+ * - query_strings must match in number, order, name and value
+ */
+int nm_path2_compare(struct Path *path1, struct Path *path2)
+{
+  struct Url *url1 = url_parse(path1->canon);
+  struct Url *url2 = url_parse(path2->canon);
+
+  int rc = url1->scheme - url2->scheme;
+  if (rc != 0)
+    goto done;
+
+  if (url1->path && url2->path)
+  {
+    rc = mutt_str_strcmp(url1->path, url2->path);
+    if (rc != 0)
+      goto done;
+  }
+
+  const char *q1 = strchr(path1->canon, '?');
+  const char *q2 = strchr(path2->canon, '?');
+
+  rc = mutt_str_strcmp(q1, q2);
+
+done:
+  url_free(&url1);
+  url_free(&url2);
+  if (rc < 0)
+    return -1;
+  if (rc > 0)
+    return 1;
+  return 0;
+}
+
+/**
+ * nm_path2_parent - Find the parent of a Mailbox path - Implements MxOps::path2_parent()
+ * @retval -1 Notmuch mailbox doesn't have a parent
+ */
+int nm_path2_parent(const struct Path *path, struct Path **parent)
+{
+  return -1;
+}
+
+/**
+ * nm_path2_pretty - Abbreviate a Mailbox path - Implements MxOps::path2_pretty()
+ */
+int nm_path2_pretty(struct Path *path, const char *folder)
+{
+  int rc = 0;
+  struct Url *url1 = url_parse(path->orig);
+  struct Url *url2 = url_parse(folder);
+  struct Buffer buf = mutt_buffer_make(256);
+
+  if (url1->scheme != url2->scheme)
+    goto done;
+
+  if (mutt_str_strcmp(url1->path, url2->path) != 0)
+    goto done;
+
+  url1->path = "//";
+  if (url_tobuffer(url1, &buf, 0) != 0)
+    goto done; // LCOV_EXCL_LINE
+
+  mutt_str_replace(&path->pretty, mutt_b2s(&buf));
+  rc = 1;
+
+done:
+  url_free(&url1);
+  url_free(&url2);
+  mutt_buffer_dealloc(&buf);
+  return rc;
+}
+
+/**
+ * nm_path2_probe - Does this Mailbox type recognise this path? - Implements MxOps::path2_probe()
+ *
+ * **Tests**
+ * - Path must begin "notmuch://"
+ * - Database path must exist
+ * - Database path must be a directory
+ * - Database path must contain a subdirectory `.notmuch`
+ *
+ * @note The case of the URL scheme is ignored
+ */
+int nm_path2_probe(struct Path *path, const struct stat *st)
+{
+  int rc = -1;
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    return -1;
+
+  if (url->scheme != U_NOTMUCH)
+    goto done;
+
+  // We stat the dir because NeoMutt can't parse the database path itself.
+  struct stat std = { 0 };
+  if ((stat(url->path, &std) != 0) || !S_ISDIR(std.st_mode))
+    goto done;
+
+  char buf[PATH_MAX];
+  snprintf(buf, sizeof(buf), "%s/.notmuch", url->path);
+  memset(&std, 0, sizeof(std));
+  if ((stat(buf, &std) != 0) || !S_ISDIR(std.st_mode))
+    goto done;
+
+  path->type = MUTT_NOTMUCH;
+  rc = 0;
+
+done:
+  url_free(&url);
+  return rc;
+}
+
+/**
+ * nm_path2_tidy - Tidy a Mailbox path - Implements MxOps::path2_tidy()
+ *
+ * **Changes**
+ * - Lowercase the URL scheme
+ * - Tidy the database path
+ */
+int nm_path2_tidy(struct Path *path)
+{
+  int rc = -1;
+  struct Buffer *buf = NULL;
+  char *tidy = NULL;
+
+  struct Url *url = url_parse(path->orig);
+  if (!url)
+    return -1;
+
+  if (url->scheme != U_NOTMUCH)
+    goto done;
+
+  buf = mutt_buffer_pool_get();
+  tidy = mutt_path_tidy2(url->path, true);
+
+  url->host = "/";
+  url->path = tidy;
+  if (url_tobuffer(url, buf, U_PATH) < 0)
+    goto done; // LCOV_EXCL_LINE
+
+  mutt_str_replace(&path->orig, mutt_b2s(buf));
+  path->flags |= MPATH_TIDY;
+  rc = 0;
+
+done:
+  url_free(&url);
+  FREE(&tidy);
+  mutt_buffer_pool_release(&buf);
+  return rc;
+}
diff --git a/notmuch/path.h b/notmuch/path.h
new file mode 100644
index 000000000..56fef17ab
--- /dev/null
+++ b/notmuch/path.h
@@ -0,0 +1,36 @@
+/**
+ * @file
+ * Notmuch path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MUTT_NOTMUCH_PATH_H
+#define MUTT_NOTMUCH_PATH_H
+
+struct Path;
+struct stat;
+
+int nm_path2_canon  (struct Path *path);
+int nm_path2_compare(struct Path *path1, struct Path *path2);
+int nm_path2_parent (const struct Path *path, struct Path **parent);
+int nm_path2_pretty (struct Path *path, const char *folder);
+int nm_path2_probe  (struct Path *path, const struct stat *st);
+int nm_path2_tidy   (struct Path *path);
+
+#endif /* MUTT_NOTMUCH_PATH_H */
diff --git a/notmuch/private.h b/notmuch/private.h
index e26928a5d..48e96dc2e 100644
--- a/notmuch/private.h
+++ b/notmuch/private.h
@@ -20,18 +20,17 @@
  * this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 
+#ifndef MUTT_NOTMUCH_PRIVATE_H
+#define MUTT_NOTMUCH_PRIVATE_H
+
 #include <notmuch.h>
 #include <stdbool.h>
 #include <time.h>
 #include "core/lib.h"
 #include "progress.h"
 
-#ifndef MUTT_NOTMUCH_PRIVATE_H
-#define MUTT_NOTMUCH_PRIVATE_H
-
-#ifdef LIBNOTMUCH_CHECK_VERSION
-#undef LIBNOTMUCH_CHECK_VERSION
-#endif
+struct Path;
+struct stat;
 
 /* The definition in <notmuch.h> is broken */
 #define LIBNOTMUCH_CHECK_VERSION(major, minor, micro)                             \
@@ -40,6 +39,7 @@
    (LIBNOTMUCH_MAJOR_VERSION == (major) &&                                        \
     LIBNOTMUCH_MINOR_VERSION == (minor) && LIBNOTMUCH_MICRO_VERSION >= (micro)))
 
+extern const char NmUrlProtocol[];
 extern const int NmUrlProtocolLen;
 
 /**
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 8e871d19d..f77d4c1ea 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -190,6 +190,7 @@ nntp/nntp.c
 nntp/path.c
 notmuch/db.c
 notmuch/notmuch.c
+notmuch/path.c
 opcodes.c
 opcodes.h
 pager.c
diff --git a/test/Makefile.autosetup b/test/Makefile.autosetup
index bf0418693..bba1aaac4 100644
--- a/test/Makefile.autosetup
+++ b/test/Makefile.autosetup
@@ -346,6 +346,10 @@ MX_PATH_OBJS	= test/mx_path/compmbox.o \
 		  test/mx_path/mbox.o \
 		  test/mx_path/nntp.o \
 
+@if USE_NOTMUCH
+MX_PATH_OBJS+=	  test/mx_path/notmuch.o
+@endif
+
 PARAMETER_OBJS	= test/parameter/mutt_param_cmp_strict.o \
 		  test/parameter/mutt_param_delete.o \
 		  test/parameter/mutt_param_free.o \
diff --git a/test/main.c b/test/main.c
index 27bf54a6c..64d0d9f8d 100644
--- a/test/main.c
+++ b/test/main.c
@@ -599,6 +599,15 @@
   NEOMUTT_TEST_ITEM(test_url_tobuffer)                                         \
   NEOMUTT_TEST_ITEM(test_url_tostring)
 
+#define NOTMUCH_TEST_LIST                                                      \
+  /* notmuch */                                                                \
+  NEOMUTT_TEST_ITEM(test_nm_path2_canon)                                       \
+  NEOMUTT_TEST_ITEM(test_nm_path2_compare)                                     \
+  NEOMUTT_TEST_ITEM(test_nm_path2_parent)                                      \
+  NEOMUTT_TEST_ITEM(test_nm_path2_pretty)                                      \
+  NEOMUTT_TEST_ITEM(test_nm_path2_probe)                                       \
+  NEOMUTT_TEST_ITEM(test_nm_path2_tidy)
+
 /******************************************************************************
  * You probably don't need to touch what follows.
  *****************************************************************************/
@@ -644,6 +653,9 @@ NEOMUTT_TEST_LIST
 #ifdef HAVE_TC
   NEOMUTT_TEST_ITEM(test_store_tc)
 #endif
+#ifdef USE_NOTMUCH
+NOTMUCH_TEST_LIST
+#endif
 #undef NEOMUTT_TEST_ITEM
 
 TEST_LIST = {
@@ -688,6 +700,9 @@ NEOMUTT_TEST_ITEM(test_compress_common)
 #ifdef HAVE_TC
   NEOMUTT_TEST_ITEM(test_store_tc)
 #endif
+#ifdef USE_NOTMUCH
+  NOTMUCH_TEST_LIST
+#endif
 #undef NEOMUTT_TEST_ITEM
   { 0 }
 };
diff --git a/test/mx_path/notmuch.c b/test/mx_path/notmuch.c
new file mode 100644
index 000000000..765767aac
--- /dev/null
+++ b/test/mx_path/notmuch.c
@@ -0,0 +1,267 @@
+/**
+ * @file
+ * Test code for the Notmuch MxOps Path functions
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#define TEST_NO_MAIN
+#include "config.h"
+#include "acutest.h"
+#include <string.h>
+#include <sys/stat.h>
+#include "mutt/lib.h"
+#include "core/lib.h"
+#include "common.h"
+#include "notmuch/path.h"
+#include "test_common.h"
+
+void test_nm_path2_canon(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",             "notmuch://%s/notmuch/apple?one=apple&two=banana",              0 }, // Same
+    { "notmuch://%s/notmuch/symlink?one=apple&two=banana",           "notmuch://%s/notmuch/apple?one=apple&two=banana",              0 }, // Symlink
+    { "notmuch://%s/notmuch/cherry?one=apple&two=banana",            "notmuch://%s/notmuch/cherry?one=apple&two=banana",            -1 }, // Missing
+    { "notmuch://%s/notmuch/apple?two=banana&one=apple",             "notmuch://%s/notmuch/apple?one=apple&two=banana",              0 }, // Query (sort)
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana&one=cherry",  "notmuch://%s/notmuch/apple?one=apple&one=cherry&two=banana",   0 }, // Query (dupe)
+    { "notmuch://%s/notmuch/apple?one=cherry&two=banana&one=cherry", "notmuch://%s/notmuch/apple?one=cherry&one=cherry&two=banana",  0 }, // Query (dupe)
+    { "pop://example.com/",                                          "pop://example.com/",                                          -1 },
+    { "junk://example.com/",                                         "junk://example.com/",                                         -1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = { 0 };
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+    path.type = MUTT_NOTMUCH;
+    path.flags = MPATH_RESOLVED | MPATH_TIDY;
+
+    rc = nm_path2_canon(&path);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.flags & MPATH_CANONICAL);
+      TEST_CHECK(path.canon != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.canon, second) == 0);
+    }
+    FREE(&path.canon);
+  }
+}
+
+void test_nm_path2_compare(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "notmuch://%s/notmuch/apple?one=apple&two=banana",                0 }, // Match
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "pop://example.com/",                                             1 }, // Scheme differs
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "notmuch://%s/notmuch/banana?one=apple&two=banana",              -1 }, // Path differs
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "notmuch://?one=apple&two=banana",                                0 }, // Path missing
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "notmuch://%s/notmuch/apple?one=apple",                           1 }, // Query differs (fewer)
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",           "notmuch://%s/notmuch/apple?one=apple&two=banana&three=cherry",  -1 }, // Query differs (more)
+    { "notmuch://%s/notmuch/apple?one=apple&one=apple&two=banana", "notmuch://%s/notmuch/apple?one=apple&one=apple&two=banana",      0 }, // Query (dupes)
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path1 = {
+    .type = MUTT_NOTMUCH,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+  struct Path path2 = {
+    .type = MUTT_NOTMUCH,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path1.canon = first;
+    TEST_CASE(path1.canon);
+
+    path2.canon = second;
+    TEST_CASE(path2.canon);
+
+    rc = nm_path2_compare(&path1, &path2);
+    TEST_CHECK(rc == tests[i].retval);
+  }
+}
+
+void test_nm_path2_parent(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple", NULL, -1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = {
+    .type = MUTT_NOTMUCH,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  struct Path *parent = NULL;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+
+    rc = nm_path2_parent(&path, &parent);
+    TEST_CHECK(rc == tests[i].retval);
+    TEST_CHECK(mutt_str_strcmp(parent ? parent->orig : NULL, second) == 0);
+  }
+}
+
+void test_nm_path2_pretty(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",  "notmuch://?one=apple&two=banana", 1 },
+    { "notmuch://%s/notmuch/cherry?one=apple&two=banana", NULL,                              0 },
+    { "pop://example.com/",                               NULL,                              0 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+  char folder[256] = { 0 };
+
+  test_gen_path(folder, sizeof(folder), "notmuch://%s/notmuch/apple");
+
+  struct Path path = {
+    .type = MUTT_NOTMUCH,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+
+    rc = nm_path2_pretty(&path, folder);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc > 0)
+    {
+      TEST_CHECK(path.pretty != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.pretty, second) == 0);
+    }
+  }
+}
+
+void test_nm_path2_probe(void)
+{
+  // clang-format off
+  static const struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple",   NULL,  0 }, // OK
+    { "notmuch://%s/notmuch/symlink", NULL,  0 }, // Symlink
+    { "notmuch://%s/notmuch/banana",  NULL, -1 }, // Missing .notmuch dir
+    { "notmuch://%s/notmuch/cherry",  NULL, -1 }, // Missing dir
+    { "pop://example.com/",           NULL, -1 },
+    { "junk://example.com/",          NULL, -1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+
+  struct Path path = { 0 };
+  struct stat st;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+    path.type = MUTT_UNKNOWN;
+    path.flags = MPATH_NO_FLAGS;
+    memset(&st, 0, sizeof(st));
+    stat(path.orig, &st);
+    rc = nm_path2_probe(&path, &st);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.type > MUTT_UNKNOWN);
+    }
+  }
+}
+
+void test_nm_path2_tidy(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "notmuch://%s/notmuch/apple?one=apple&two=banana",            "notmuch://%s/notmuch/apple?one=apple&two=banana",  0 },
+    { "NOTMUCH://%s/notmuch/apple?one=apple&two=banana",            "notmuch://%s/notmuch/apple?one=apple&two=banana",  0 },
+    { "notmuch://%s/notmuch/../notmuch/apple?one=apple&two=banana", "notmuch://%s/notmuch/apple?one=apple&two=banana",  0 },
+    { "pop://example.com/",                                         "pop://example.com/",                              -1 },
+    { "junk://example.com/",                                        "junk://example.com/",                             -1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = {
+    .type = MUTT_NOTMUCH,
+    .flags = MPATH_RESOLVED,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = mutt_str_strdup(first);
+    TEST_CASE(path.orig);
+
+    rc = nm_path2_tidy(&path);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.orig != NULL);
+      TEST_CHECK(path.flags & MPATH_TIDY);
+      TEST_CHECK(mutt_str_strcmp(path.orig, second) == 0);
+    }
+    FREE(&path.orig);
+  }
+}
