From a6154567935f16e58105fcad7d9728dedf9e1446 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Thu, 2 Jan 2020 11:56:02 +0000
Subject: [PATCH 18/29] debug: account

---
 Makefile.autosetup |   6 +-
 auto.def           |   8 +-
 debug/account.c    | 345 +++++++++++++++++++++++++++++++++++++++++++++
 debug/lib.h        |  21 +++
 debug/notify.c     |  15 ++
 debug/subset.c     |  96 +++++++++++++
 main.c             |   3 +
 mutt/notify.c      |   9 --
 mutt/notify.h      |   9 +-
 mutt_config.c      |   4 +-
 10 files changed, 502 insertions(+), 14 deletions(-)
 create mode 100644 debug/account.c
 create mode 100644 debug/subset.c

diff --git a/Makefile.autosetup b/Makefile.autosetup
index c7f85c1df..ab43f4e54 100644
--- a/Makefile.autosetup
+++ b/Makefile.autosetup
@@ -245,6 +245,10 @@ $(PWD)/core:
 
 ###############################################################################
 # libdebug
+LIBDEBUG=	libdebug.a
+@if USE_DEBUG_ACCOUNT
+LIBDEBUGOBJS+=	debug/account.o debug/subset.o
+@endif
 @if HAVE_LIBUNWIND
 LIBDEBUGOBJS+=	debug/backtrace.o
 @endif
@@ -263,7 +267,7 @@ LIBDEBUGOBJS+=	debug/window.o
 @if USE_DEBUG_WINDOW || USE_DEBUG_NOTIFY
 LIBDEBUGOBJS+=	debug/common.o
 @endif
-@if HAVE_LIBUNWIND || USE_DEBUG_GRAPHVIZ || USE_DEBUG_NOTIFY || USE_DEBUG_PARSE_TEST || USE_DEBUG_WINDOW
+@if HAVE_LIBUNWIND || USE_DEBUG_ACCOUNT || USE_DEBUG_GRAPHVIZ || USE_DEBUG_NOTIFY || USE_DEBUG_PARSE_TEST || USE_DEBUG_WINDOW
 LIBDEBUG=	libdebug.a
 CLEANFILES+=	$(LIBDEBUG) $(LIBDEBUGOBJS)
 ALLOBJS+=	$(LIBDEBUGOBJS)
diff --git a/auto.def b/auto.def
index 3babf8cb2..4c7771558 100644
--- a/auto.def
+++ b/auto.def
@@ -120,6 +120,7 @@ options {
 # Enable all options
   everything=0              => "Enable all options"
 # Debug options
+  debug-account=0           => "DEBUG: Enable account dump"
   debug-backtrace=0         => "DEBUG: Enable backtrace support with libunwind"
   with-backtrace:path       => "Location of libunwind"
   debug-graphviz=0          => "DEBUG: Enable Graphviz dump"
@@ -137,7 +138,7 @@ if {1} {
   # Keep sorted, please.
   foreach opt {
     autocrypt bdb coverage debug-backtrace debug-graphviz debug-notify
-    debug-parse-test debug-window doc everything fmemopen full-doc gdbm gnutls
+    debug-account debug-parse-test debug-window doc everything fmemopen full-doc gdbm gnutls
     gpgme gss homespool idn idn2 include-path-in-cflags inotify kyotocabinet
     lmdb locales-fix lua lz4 mixmaster nls notmuch pcre2 pgp pkgconf qdbm
     rocksdb sasl smime sqlite ssl testing tdb tokyocabinet zlib zstd
@@ -1183,6 +1184,11 @@ if {[get-define want-gss]} {
 ###############################################################################
 # DEBUG options
 
+# Account dump
+if {[get-define want-debug-account]} {
+  define USE_DEBUG_ACCOUNT 1
+}
+
 # Backtrace support with libunwind
 if {[get-define want-debug-backtrace]} {
   if {![check-inc-and-lib libunwind [opt-val with-backtrace $prefix] \
diff --git a/debug/account.c b/debug/account.c
new file mode 100644
index 000000000..71581cb5c
--- /dev/null
+++ b/debug/account.c
@@ -0,0 +1,345 @@
+/**
+ * @file
+ * Dump all Accounts
+ *
+ * @authors
+ * Copyright (C) 2019-2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * @page debug_account Dump all Accounts
+ *
+ * Dump all Accounts
+ */
+
+#include "config.h"
+#include <string.h>
+#include "mutt/lib.h"
+#include "config/lib.h"
+#include "core/lib.h"
+#include "mutt.h"
+#include "lib.h"
+#include "mutt_globals.h"
+#include "init.h"
+
+void dump_one(struct Buffer *tmp, struct Buffer *value, const char *name)
+{
+  mutt_buffer_reset(value);
+  mutt_buffer_reset(tmp);
+  struct HashElem *he = NULL;
+  he = cs_get_elem(NeoMutt->sub->cs, name);
+  if (!he)
+  {
+    printf("\n");
+    return;
+  }
+  int type = DTYPE(he->type);
+  cs_he_string_get(NeoMutt->sub->cs, he, value);
+  if ((type != DT_BOOL) && (type != DT_NUMBER) && (type != DT_LONG) && (type != DT_QUAD))
+  {
+    mutt_buffer_reset(tmp);
+    pretty_var(value->data, tmp);
+    mutt_buffer_strcpy(value, tmp->data);
+  }
+  dump_config_neo(NeoMutt->sub->cs, he, value, NULL, CS_DUMP_NO_FLAGS, stdout);
+}
+
+void dump_vars(const char *account)
+{
+  const char *vars[] = { "folder", "index_format", "sort", "sort_aux" };
+  struct Buffer tmp = mutt_buffer_make(1024);
+  struct Buffer value = mutt_buffer_make(1024);
+  char name[128];
+
+  printf("%s:\n", account ? account : "base values");
+  for (size_t i = 0; i < mutt_array_size(vars); i++)
+  {
+    printf("    ");
+    if (account)
+      snprintf(name, sizeof(name), "%s:%s", account, vars[i]);
+    else
+      snprintf(name, sizeof(name), "%s", vars[i]);
+    dump_one(&tmp, &value, name);
+  }
+
+  mutt_buffer_dealloc(&tmp);
+  mutt_buffer_dealloc(&value);
+}
+
+void dump_accounts2(void)
+{
+  printf("\n");
+  dump_vars(NULL);
+  struct Account *np = NULL;
+  TAILQ_FOREACH(np, &NeoMutt->accounts, entries)
+  {
+    dump_vars(np->name);
+  }
+}
+
+void dump_inherited(struct ConfigSet *cs)
+{
+  printf("\n");
+
+  struct Buffer tmp = mutt_buffer_make(1024);
+  struct Buffer value = mutt_buffer_make(1024);
+
+  struct HashElem **list = get_elem_list(cs);
+  for (size_t i = 0; list[i]; i++)
+  {
+    const char *item = list[i]->key.strkey;
+    if (!strchr(item, ':'))
+      continue;
+    cs_he_string_get(cs, list[i], &value);
+    dump_one(&tmp, &value, item);
+  }
+
+  mutt_buffer_dealloc(&tmp);
+  mutt_buffer_dealloc(&value);
+}
+
+void kill_accounts(void)
+{
+  char buf[128];
+  struct Buffer err = mutt_buffer_make(1024);
+
+  struct Account *np = NULL;
+  struct Account *tmp = NULL;
+  TAILQ_FOREACH_SAFE(np, &NeoMutt->accounts, entries, tmp)
+  {
+    snprintf(buf, sizeof(buf), "unaccount %s", np->name);
+    mutt_parse_rc_line(buf, &err);
+  }
+
+  mutt_buffer_dealloc(&err);
+}
+
+struct HashElem *get_he(struct ConfigSet *cs, const char *name)
+{
+  struct Slist *sl = slist_parse(name, SLIST_SEP_COLON);
+  if (!sl || (sl->count < 1) || (sl->count > 3))
+    return NULL;
+
+  struct ConfigSubset *sub = NULL;
+  if (sl->count == 1)
+  {
+    sub = NeoMutt->sub;
+    goto have_sub;
+  }
+
+  struct ListNode *np = STAILQ_FIRST(&sl->head);
+  struct Account *a = account_find(np->data);
+  if (!a)
+    return NULL;
+
+  if (sl->count == 2)
+  {
+    sub = a->sub;
+    goto have_sub;
+  }
+
+  np = STAILQ_NEXT(STAILQ_FIRST(&sl->head), entries);
+  struct Mailbox *m = mailbox_find(np->data);
+  if (!m)
+    return NULL;
+
+  sub = m->sub;
+  if (sub)
+    ;
+
+have_sub:
+  return NULL;
+}
+
+#if 0
+void test_parse_set2(int argc, char *argv[])
+{
+    struct Buffer *tmp = mutt_buffer_alloc(256);
+    struct Buffer *var = mutt_buffer_alloc(256);
+    struct Buffer *err = mutt_buffer_alloc(256);
+    for (size_t j = 1; j < argc; j++)
+    {
+      mutt_buffer_reset(tmp);
+      mutt_buffer_reset(var);
+      mutt_buffer_reset(err);
+
+      printf("arg = %s\n", argv[j]);
+      mutt_buffer_printf(var, "set %s", argv[j]);
+      var->dptr = var->data + 4;
+      printf("%s\n", var->data);
+      int rc = parse_set(tmp, var, 0, err);
+      mutt_buffer_reset(var);
+      char *eq = strchr(argv[j], '=');
+      if (eq)
+        *eq = '\0';
+      struct HashElem *he = get_he(NeoMutt->sub->cs, argv[j]);
+      cs_subset_he_string_get(sub, he, var);
+      if (rc < 0)
+        printf("%2d %s\n", rc, var->data);
+      else
+        printf("%2d %s = %s\n", rc, argv[j], var->data);
+    }
+    mutt_buffer_free(&err);
+    mutt_buffer_free(&var);
+    mutt_buffer_free(&tmp);
+}
+#endif
+
+void dump_config_notify(const char *level, struct NotifyCallback *nc)
+{
+  if (nc->event_type != NT_CONFIG)
+    return;
+
+  struct EventConfig *ec = nc->event_data;
+  const struct ConfigSubset *sub = ec->sub;
+  const char *scope = "???";
+  switch (sub->scope)
+  {
+    case SET_SCOPE_NEOMUTT:
+      scope = "neomutt";
+      break;
+    case SET_SCOPE_ACCOUNT:
+      scope = "account";
+      break;
+    case SET_SCOPE_MAILBOX:
+      scope = "mailbox";
+      break;
+  }
+
+  printf("Event %s, Observer %s: %s (%s)\n", scope, level, ec->name, NONULL(sub->name));
+}
+
+int neomutt_observer(struct NotifyCallback *nc)
+{
+  dump_config_notify("neomutt", nc);
+  return 0;
+}
+
+int account_observer(struct NotifyCallback *nc)
+{
+  dump_config_notify("account", nc);
+  return 0;
+}
+
+int mailbox_observer(struct NotifyCallback *nc)
+{
+  dump_config_notify("mailbox", nc);
+  return 0;
+}
+
+void test1(struct NeoMutt *n)
+{
+  const char *name = "time_inc";
+  // struct HashElem *he_n = NULL;
+  // struct HashElem *he_a = NULL;
+  // struct HashElem *he_m = NULL;
+  intptr_t val_n;
+  intptr_t val_a;
+  intptr_t val_m;
+
+  struct Account *a = account_new("fruit", n->sub);
+  a->type = MUTT_MAILDIR;
+
+  struct Mailbox *m = mailbox_new(NULL); // "apple"
+  mailbox_set_subset(m, a->sub);
+  account_mailbox_add(a, m);
+
+  subset_dump(m->sub);
+  // subset_dump_var(m->sub, name);
+
+  notify_observer_add(n->notify, neomutt_observer, NULL);
+  notify_observer_add(a->notify, account_observer, NULL);
+  notify_observer_add(m->notify, mailbox_observer, NULL);
+
+  // cs_subset_str_native_set(m->sub, name, 42, NULL);
+
+  // he_n = cs_subset_lookup(n->sub, name);
+  // he_a = cs_subset_lookup(a->sub, name);
+  // he_m = cs_subset_lookup(m->sub, name);
+
+  // val_n = cs_subset_str_native_get(n->sub, name, NULL);
+  // val_a = cs_subset_str_native_get(a->sub, name, NULL);
+  // val_m = cs_subset_str_native_get(m->sub, name, NULL);
+
+  // printf("neomutt: %ld\n", val_n);
+  // printf("account: %ld\n", val_a);
+  // printf("mailbox: %ld\n", val_m);
+
+  // cs_subset_he_native_set(n->sub, he_n, 10, NULL);
+  cs_subset_str_native_set(n->sub, name, 10, NULL);
+  subset_dump_var(m->sub, name);
+
+  // val_n = cs_subset_str_native_get(n->sub, name, NULL);
+  // val_a = cs_subset_str_native_get(a->sub, name, NULL);
+  // val_m = cs_subset_str_native_get(m->sub, name, NULL);
+
+  // printf("neomutt: %ld\n", val_n);
+  // printf("account: %ld\n", val_a);
+  // printf("mailbox: %ld\n", val_m);
+
+  // cs_subset_he_native_set(a->sub, he_a, 20, NULL);
+  cs_subset_str_native_set(a->sub, name, 20, NULL);
+  subset_dump_var(m->sub, name);
+
+  // val_n = cs_subset_str_native_get(n->sub, name, NULL);
+  // val_a = cs_subset_str_native_get(a->sub, name, NULL);
+  // val_m = cs_subset_str_native_get(m->sub, name, NULL);
+
+  // printf("neomutt: %ld\n", val_n);
+  // printf("account: %ld\n", val_a);
+  // printf("mailbox: %ld\n", val_m);
+
+  // cs_subset_he_native_set(m->sub, he_m, 30, NULL);
+  cs_subset_str_native_set(m->sub, name, 30, NULL);
+  subset_dump_var(m->sub, name);
+
+  val_n = cs_subset_str_native_get(n->sub, name, NULL);
+  val_a = cs_subset_str_native_get(a->sub, name, NULL);
+  val_m = cs_subset_str_native_get(m->sub, name, NULL);
+
+  printf("neomutt: %ld\n", val_n);
+  printf("account: %ld\n", val_a);
+  printf("mailbox: %ld\n", val_m);
+
+  account_free(&a);
+}
+
+void test2(struct NeoMutt *n)
+{
+  const char *name = "copy";
+
+  struct Account *a = account_new("fruit", n->sub);
+  a->type = MUTT_MAILDIR;
+
+  struct Mailbox *m = mailbox_new(NULL); // "apple"
+  mailbox_set_subset(m, a->sub);
+  account_mailbox_add(a, m);
+
+  cs_subset_str_native_set(n->sub, name, MUTT_ASKNO, NULL);
+  subset_dump_var(m->sub, name);
+
+  quad_str_toggle(m->sub, name, NULL);
+  subset_dump_var(m->sub, name);
+
+  account_free(&a);
+}
+
+void test_config_notify(struct NeoMutt *n)
+{
+  // test1(n);
+  test2(n);
+}
diff --git a/debug/lib.h b/debug/lib.h
index 72ff7cd02..119dc70e9 100644
--- a/debug/lib.h
+++ b/debug/lib.h
@@ -27,11 +27,13 @@
  *
  * | File                | Description                |
  * | :------------------ | :------------------------- |
+ * | debug/account.c     | @subpage debug_account     |
  * | debug/backtrace.c   | @subpage debug_backtrace   |
  * | debug/common.c      | @subpage debug_common      |
  * | debug/graphviz.c    | @subpage debug_graphviz    |
  * | debug/notify.c      | @subpage debug_notify      |
  * | debug/parse_test.c  | @subpage debug_parse       |
+ * | debug/subset.c      | @subpage debug_subset      |
  * | debug/window.c      | @subpage debug_window      |
  */
 
@@ -39,10 +41,23 @@
 #define MUTT_DEBUG_LIB_H
 
 #include "email/lib.h"
+#include <stddef.h>
 
+struct Buffer;
+struct ConfigSubset;
+struct NeoMutt;
+struct Notify;
 struct MuttWindow;
 struct NotifyCallback;
 
+// Account
+int  account_observer  (struct NotifyCallback *nc);
+void dump_accounts2    (void);
+void dump_config_notify(const char *level, struct NotifyCallback *nc);
+void kill_accounts     (void);
+int  mailbox_observer  (struct NotifyCallback *nc);
+int  neomutt_observer  (struct NotifyCallback *nc);
+
 // Backtrace
 void show_backtrace(void);
 
@@ -59,10 +74,16 @@ const char *get_content_type       (enum ContentType type);
 
 // Notify
 int debug_notify_observer(struct NotifyCallback *nc);
+size_t observer_count(struct Notify *notify);
 
 // Parse Set
 void test_parse_set(void);
 
+// Subset
+void subset_dump     (const struct ConfigSubset *sub);
+void subset_dump_var (const struct ConfigSubset *sub, const char *var);
+void subset_dump_var2(const struct ConfigSubset *sub, const char *var);
+
 // Window
 void debug_win_dump(void);
 
diff --git a/debug/notify.c b/debug/notify.c
index 0c517642b..1a5946b52 100644
--- a/debug/notify.c
+++ b/debug/notify.c
@@ -331,3 +331,18 @@ int debug_notify_observer(struct NotifyCallback *nc)
 
   return 0;
 }
+
+size_t observer_count(struct Notify *notify)
+{
+  if (!notify)
+    return 0;
+
+  size_t count = 0;
+  struct ObserverNode *np = NULL;
+  STAILQ_FOREACH(np, &notify->observers, entries)
+  {
+    count++;
+  }
+
+  return count;
+}
diff --git a/debug/subset.c b/debug/subset.c
new file mode 100644
index 000000000..3873229c4
--- /dev/null
+++ b/debug/subset.c
@@ -0,0 +1,96 @@
+/**
+ * @file
+ * Dump all Config Subsets
+ *
+ * @authors
+ * Copyright (C) 2019-2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * @page debug_subset Dump all Config Subsets
+ *
+ * Dump all Config Subsets
+ */
+
+#include "config.h"
+#include <limits.h>
+#include <stdint.h>
+#include <stdio.h>
+#include "mutt/lib.h"
+#include "config/lib.h"
+#include "lib.h"
+
+static const char *subset_get_scope(enum ConfigScope scope)
+{
+  switch (scope)
+  {
+    case SET_SCOPE_NEOMUTT:
+      return "neomutt";
+    case SET_SCOPE_ACCOUNT:
+      return "account";
+    case SET_SCOPE_MAILBOX:
+      return "mailbox";
+    default:
+      return "unknown";
+  }
+}
+
+void subset_dump(const struct ConfigSubset *sub)
+{
+  for (; sub; sub = sub->parent)
+  {
+    printf("%s: '%s' (%ld)", subset_get_scope(sub->scope), NONULL(sub->name),
+           observer_count(sub->notify));
+    if (sub->parent)
+      printf(" --> ");
+  }
+  printf("\n");
+}
+
+void subset_dump_var2(const struct ConfigSubset *sub, const char *var)
+{
+  if (!sub)
+    return;
+
+  subset_dump_var2(sub->parent, var);
+  if (sub->parent)
+    printf(", ");
+
+  struct HashElem *he = cs_subset_lookup(sub, var);
+  if (he)
+    printf("\033[1;32m");
+  else
+    printf("\033[1;31m");
+
+  printf("%s:%s", NONULL(sub->name), var);
+
+  printf("\033[0m");
+
+  intptr_t value = cs_he_native_get(sub->cs, he, NULL);
+  if (value == INT_MIN)
+    printf("[X]");
+  else if (DTYPE(he->type) != 0)
+    printf("=%ld", value);
+  else
+    printf("(%ld)", value);
+}
+
+void subset_dump_var(const struct ConfigSubset *sub, const char *var)
+{
+  subset_dump_var2(sub, var);
+  printf("\n");
+}
diff --git a/main.c b/main.c
index 10ab5e5ca..07e8709e6 100644
--- a/main.c
+++ b/main.c
@@ -803,6 +803,9 @@ int main(int argc, char *argv[], char *envp[])
 
   if (batch_mode)
   {
+#ifdef USE_DEVEL_GRAPHVIZ
+    dump_graphviz("batch");
+#endif
     goto main_ok; // TEST22: neomutt -B
   }
 
diff --git a/mutt/notify.c b/mutt/notify.c
index 3fab31e0d..2b66e8862 100644
--- a/mutt/notify.c
+++ b/mutt/notify.c
@@ -33,15 +33,6 @@
 #include "memory.h"
 #include "queue.h"
 
-/**
- * struct Notify - Notification API
- */
-struct Notify
-{
-  struct Notify *parent;
-  struct ObserverList observers;
-};
-
 /**
  * notify_new - Create a new notifications handler
  * @retval ptr New notification handler
diff --git a/mutt/notify.h b/mutt/notify.h
index 439874019..6f861b04e 100644
--- a/mutt/notify.h
+++ b/mutt/notify.h
@@ -27,7 +27,14 @@
 #include "notify_type.h"
 #include "observer.h"
 
-struct Notify;
+/**
+ * struct Notify - Notification API
+ */
+struct Notify
+{
+  struct Notify *parent;
+  struct ObserverList observers;
+};
 
 struct Notify *notify_new(void);
 void notify_free(struct Notify **ptr);
diff --git a/mutt_config.c b/mutt_config.c
index e00687edd..f7b7428a9 100644
--- a/mutt_config.c
+++ b/mutt_config.c
@@ -1739,7 +1739,7 @@ struct ConfigDef MuttVars[] = {
   ** run on every connection attempt that uses the OAUTHBEARER authentication
   ** mechanism.  See "$oauth" for details.
   */
-  { "imap_pass", DT_STRING|DT_SENSITIVE, &C_ImapPass, 0 },
+  { "imap_pass", DT_STRING|DT_SENSITIVE|DT_INHERIT_ACC, &C_ImapPass, 0 },
   /*
   ** .pp
   ** Specifies the password for your IMAP account.  If \fIunset\fP, NeoMutt will
@@ -1815,7 +1815,7 @@ struct ConfigDef MuttVars[] = {
   ** server which are out of the users' hands, you may wish to suppress
   ** them at some point.
   */
-  { "imap_user", DT_STRING|DT_SENSITIVE, &C_ImapUser, 0 },
+  { "imap_user", DT_STRING|DT_SENSITIVE|DT_INHERIT_ACC, &C_ImapUser, 0 },
   /*
   ** .pp
   ** The name of the user whose mail you intend to access on the IMAP
