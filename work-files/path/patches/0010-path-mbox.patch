From 95d49e5b13e50ebb5692d6544c6c70146e8fa1bb Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Fri, 21 Feb 2020 01:14:41 +0000
Subject: [PATCH 10/29] path: mbox

---
 Makefile.autosetup      |   3 +-
 mbox/lib.h              |   2 +
 mbox/mbox.c             |  13 ++
 mbox/path.c             | 175 ++++++++++++++++++++++++++
 mbox/path.h             |  36 ++++++
 po/POTFILES.in          |   1 +
 test/Makefile.autosetup |   1 +
 test/main.c             |   8 ++
 test/mx_path/mbox.c     | 268 ++++++++++++++++++++++++++++++++++++++++
 9 files changed, 506 insertions(+), 1 deletion(-)
 create mode 100644 mbox/path.c
 create mode 100644 mbox/path.h
 create mode 100644 test/mx_path/mbox.c

diff --git a/Makefile.autosetup b/Makefile.autosetup
index 424ed48a7..3e3a250a0 100644
--- a/Makefile.autosetup
+++ b/Makefile.autosetup
@@ -373,7 +373,7 @@ $(PWD)/maildir:
 ###############################################################################
 # libmbox
 LIBMBOX=	libmbox.a
-LIBMBOXOBJS=	mbox/mbox.o
+LIBMBOXOBJS=	mbox/mbox.o mbox/path.o
 CLEANFILES+=	$(LIBMBOX) $(LIBMBOXOBJS)
 ALLOBJS+=	$(LIBMBOXOBJS)
 
@@ -617,6 +617,7 @@ coverage: all test
 	  --directory compmbox \
 	  --directory imap \
 	  --directory maildir \
+	  --directory mbox \
 
 	-genhtml --output-directory lcov --frames lcov.info
 	lcov --list lcov.info
diff --git a/mbox/lib.h b/mbox/lib.h
index 209a852bf..360053df6 100644
--- a/mbox/lib.h
+++ b/mbox/lib.h
@@ -29,6 +29,7 @@
  * | File        | Description        |
  * | :---------- | :----------------- |
  * | mbox/mbox.c | @subpage mbox_mbox |
+ * | mbox/path.c | @subpage mbox_path |
  */
 
 #ifndef MUTT_MBOX_LIB_H
@@ -39,6 +40,7 @@
 #include <time.h>
 #include "core/lib.h"
 #include "mx.h"
+#include "path.h"
 
 struct stat;
 
diff --git a/mbox/mbox.c b/mbox/mbox.c
index 0c753eaed..13beb4d8b 100644
--- a/mbox/mbox.c
+++ b/mbox/mbox.c
@@ -53,6 +53,7 @@
 #include "mutt_header.h"
 #include "muttlib.h"
 #include "mx.h"
+#include "path.h"
 #include "progress.h"
 #include "protos.h"
 #include "sort.h"
@@ -1874,6 +1875,12 @@ struct MxOps MxMboxOps = {
   .path_canon       = mbox_path_canon,
   .path_pretty      = mbox_path_pretty,
   .path_parent      = mbox_path_parent,
+  .path2_canon      = mbox_path2_canon,
+  .path2_compare    = mbox_path2_compare,
+  .path2_parent     = mbox_path2_parent,
+  .path2_pretty     = mbox_path2_pretty,
+  .path2_probe      = mbox_path2_probe,
+  .path2_tidy       = mbox_path2_tidy,
 };
 
 /**
@@ -1903,5 +1910,11 @@ struct MxOps MxMmdfOps = {
   .path_canon       = mbox_path_canon,
   .path_pretty      = mbox_path_pretty,
   .path_parent      = mbox_path_parent,
+  .path2_canon      = mbox_path2_canon,
+  .path2_compare    = mbox_path2_compare,
+  .path2_parent     = mbox_path2_parent,
+  .path2_pretty     = mbox_path2_pretty,
+  .path2_probe      = mbox_path2_probe,
+  .path2_tidy       = mbox_path2_tidy,
 };
 // clang-format on
diff --git a/mbox/path.c b/mbox/path.c
new file mode 100644
index 000000000..e7ee67f1b
--- /dev/null
+++ b/mbox/path.c
@@ -0,0 +1,175 @@
+/**
+ * @file
+ * Mbox path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * @page mbox_path Mbox path manipulations
+ *
+ * Mbox path manipulations
+ */
+
+#include "config.h"
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <utime.h>
+#include "config/lib.h"
+#include "email/lib.h"
+#include "core/lib.h"
+#include "lib.h"
+#include "mutt_globals.h"
+
+extern char *HomeDir;
+
+/**
+ * mbox_path2_canon - Canonicalise a Mailbox path - Implements MxOps::path2_canon()
+ */
+int mbox_path2_canon(struct Path *path)
+{
+  if (!mutt_path_canon2(path->orig, &path->canon))
+    return -1;
+
+  path->flags |= MPATH_CANONICAL;
+  return 0;
+}
+
+/**
+ * mbox_path2_compare - Compare two Mailbox paths - Implements MxOps::path2_compare()
+ */
+int mbox_path2_compare(struct Path *path1, struct Path *path2)
+{
+  int rc = mutt_str_strcmp(path1->canon, path2->canon);
+  if (rc < 0)
+    return -1;
+  if (rc > 0)
+    return 1;
+  return 0;
+}
+
+/**
+ * mbox_path2_parent - Find the parent of a Mailbox path - Implements MxOps::path2_parent()
+ * @retval -1 Mbox mailbox doesn't have a parent
+ */
+int mbox_path2_parent(const struct Path *path, struct Path **parent)
+{
+  return -1;
+}
+
+/**
+ * mbox_path2_pretty - Abbreviate a Mailbox path - Implements MxOps::path2_pretty()
+ */
+int mbox_path2_pretty(struct Path *path, const char *folder)
+{
+  if (mutt_path2_abbr_folder(path->orig, folder, &path->pretty))
+    return 1;
+
+  if (mutt_path2_pretty(path->orig, HomeDir, &path->pretty))
+    return 1;
+
+  path->pretty = mutt_str_strdup(path->orig);
+  return 0;
+}
+
+/**
+ * mbox_path2_probe - Does this Mailbox type recognise this path? - Implements MxOps::path2_probe()
+ *
+ * **Tests**
+ * - Path must exist
+ * - Path must be a file
+ * - File may be empty
+ * - File may begin with "From " -- mbox format
+ * - File may begin with 4 x Ctrl-A -- mmdf format
+ */
+int mbox_path2_probe(struct Path *path, const struct stat *st)
+{
+  if (S_ISDIR(st->st_mode))
+    return -1;
+
+  if (st->st_size == 0) // Accept an empty file as a valid mbox
+  {
+    path->type = MUTT_MBOX;
+    return 0;
+  }
+
+  FILE *fp = fopen(path->orig, "r");
+  if (!fp)
+    return -1;
+
+  int ch;
+  while ((ch = fgetc(fp)) != EOF)
+  {
+    /* Some mailbox creation tools erroneously append a blank line to
+     * a file before appending a mail message.  This allows neomutt to
+     * detect magic for and thus open those files. */
+    if ((ch != '\n') && (ch != '\r'))
+    {
+      ungetc(ch, fp);
+      break;
+    }
+  }
+
+  enum MailboxType magic = MUTT_UNKNOWN;
+  char tmp[256];
+  if (fgets(tmp, sizeof(tmp), fp))
+  {
+    if (mutt_str_startswith(tmp, "From ", CASE_MATCH))
+      magic = MUTT_MBOX;
+    else if (mutt_str_strcmp(tmp, MMDF_SEP) == 0)
+      magic = MUTT_MMDF;
+  }
+  mutt_file_fclose(&fp);
+
+  // Restore the times as the file was not really accessed.
+  // Detection of "new mail" depends on those times being set correctly.
+#ifdef HAVE_UTIMENSAT
+  struct timespec ts[2];
+  mutt_file_get_stat_timespec(&ts[0], &st, MUTT_STAT_ATIME);
+  mutt_file_get_stat_timespec(&ts[1], &st, MUTT_STAT_MTIME);
+  utimensat(0, path, ts, 0);
+#else
+  struct utimbuf times;
+  times.actime = st->st_atime;
+  times.modtime = st->st_mtime;
+  utime(path->orig, &times);
+#endif
+
+  path->type = magic;
+  if (path->type > MUTT_UNKNOWN)
+    return 0;
+  return -1;
+}
+
+/**
+ * mbox_path2_tidy - Tidy a Mailbox path - Implements MxOps::path2_tidy()
+ */
+int mbox_path2_tidy(struct Path *path)
+{
+  char *tidy = mutt_path_tidy2(path->orig, false);
+  if (!tidy)
+    return -1; // LCOV_EXCL_LINE
+
+  FREE(&path->orig);
+  path->orig = tidy;
+  tidy = NULL;
+
+  path->flags |= MPATH_TIDY;
+  return 0;
+}
diff --git a/mbox/path.h b/mbox/path.h
new file mode 100644
index 000000000..8dac5b28b
--- /dev/null
+++ b/mbox/path.h
@@ -0,0 +1,36 @@
+/**
+ * @file
+ * Mbox path manipulations
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef MUTT_MBOX_PATH_H
+#define MUTT_MBOX_PATH_H
+
+struct Path;
+struct stat;
+
+int mbox_path2_canon  (struct Path *path);
+int mbox_path2_compare(struct Path *path1, struct Path *path2);
+int mbox_path2_parent (const struct Path *path, struct Path **parent);
+int mbox_path2_pretty (struct Path *path, const char *folder);
+int mbox_path2_probe  (struct Path *path, const struct stat *st);
+int mbox_path2_tidy   (struct Path *path);
+
+#endif /* MUTT_MBOX_PATH_H */
diff --git a/po/POTFILES.in b/po/POTFILES.in
index a452ca9fd..7361a5ced 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -124,6 +124,7 @@ maildir/shared.c
 maillist.c
 main.c
 mbox/mbox.c
+mbox/path.c
 menu.c
 monitor.c
 mutt/base64.c
diff --git a/test/Makefile.autosetup b/test/Makefile.autosetup
index 2ae9ca35f..bac8e1cd1 100644
--- a/test/Makefile.autosetup
+++ b/test/Makefile.autosetup
@@ -343,6 +343,7 @@ NOTIFY_OBJS	= test/notify/notify_free.o \
 MX_PATH_OBJS	= test/mx_path/compmbox.o \
 		  test/mx_path/imap.o \
 		  test/mx_path/maildir.o \
+		  test/mx_path/mbox.o \
 
 PARAMETER_OBJS	= test/parameter/mutt_param_cmp_strict.o \
 		  test/parameter/mutt_param_delete.o \
diff --git a/test/main.c b/test/main.c
index 3505e20ac..deb164180 100644
--- a/test/main.c
+++ b/test/main.c
@@ -368,6 +368,14 @@
   NEOMUTT_TEST_ITEM(test_mutt_map_get_value)                                   \
   NEOMUTT_TEST_ITEM(test_mutt_map_get_value_n)                                 \
                                                                                \
+  /* mbox */                                                                   \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_canon)                                     \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_compare)                                   \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_parent)                                    \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_pretty)                                    \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_probe)                                     \
+  NEOMUTT_TEST_ITEM(test_mbox_path2_tidy)                                      \
+                                                                               \
   /* mbyte */                                                                  \
   NEOMUTT_TEST_ITEM(test_mutt_mb_charlen)                                      \
   NEOMUTT_TEST_ITEM(test_mutt_mb_filter_unprintable)                           \
diff --git a/test/mx_path/mbox.c b/test/mx_path/mbox.c
new file mode 100644
index 000000000..e5fad5ad9
--- /dev/null
+++ b/test/mx_path/mbox.c
@@ -0,0 +1,268 @@
+/**
+ * @file
+ * Test code for the Mbox MxOps Path functions
+ *
+ * @authors
+ * Copyright (C) 2020 Richard Russon <rich@flatcap.org>
+ *
+ * @copyright
+ * This program is free software: you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation, either version 2 of the License, or (at your option) any later
+ * version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
+ * details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#define TEST_NO_MAIN
+#include "config.h"
+#include "acutest.h"
+#include <string.h>
+#include <sys/stat.h>
+#include "mutt/lib.h"
+#include "core/lib.h"
+#include "common.h"
+#include "mbox/path.h"
+#include "test_common.h"
+
+void test_mbox_path2_canon(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "%s/mbox/apple.mbox",         "%s/mbox/apple.mbox",  0 }, // Real path
+    { "%s/mbox/symlink/apple.mbox", "%s/mbox/apple.mbox",  0 }, // Symlink
+    { "%s/mbox/missing",            NULL,                 -1 }, // Missing
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = { 0 };
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+    path.type = MUTT_MBOX;
+    path.flags = MPATH_RESOLVED | MPATH_TIDY;
+
+    rc = mbox_path2_canon(&path);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.flags & MPATH_CANONICAL);
+      TEST_CHECK(path.canon != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.canon, second) == 0);
+    }
+    FREE(&path.canon);
+  }
+}
+
+void test_mbox_path2_compare(void)
+{
+  // clang-format off
+  static const struct TestValue tests[] = {
+    { "%s/mbox/apple.mbox",  "%s/mbox/apple.mbox",   0 }, // Match
+    { "%s/mbox/apple.mbox",  "%s/mbox/orange.mbox", -1 }, // Differ
+    { "%s/mbox/orange.mbox", "%s/mbox/apple.mbox",   1 }, // Differ
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path1 = {
+    .type = MUTT_MBOX,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+  struct Path path2 = {
+    .type = MUTT_MBOX,
+    .flags = MPATH_RESOLVED | MPATH_TIDY | MPATH_CANONICAL,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path1.canon = first;
+    TEST_CASE(path1.canon);
+
+    path2.canon = second;
+    TEST_CASE(path2.canon);
+
+    rc = mbox_path2_compare(&path1, &path2);
+    TEST_CHECK(rc == tests[i].retval);
+  }
+}
+
+void test_mbox_path2_parent(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "%s/mbox/apple.mbox", NULL, -1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = {
+    .type = MUTT_MBOX,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  struct Path *parent = NULL;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+
+    rc = mbox_path2_parent(&path, &parent);
+    TEST_CHECK(rc == tests[i].retval);
+    TEST_CHECK(mutt_str_strcmp(parent ? parent->orig : NULL, second) == 0);
+  }
+}
+
+void test_mbox_path2_pretty(void)
+{
+  // clang-format off
+  static struct TestValue tests[] = {
+    { "%s/mbox/apple.mbox",         "+mbox/apple.mbox",         1 },
+    { "%s/mbox/symlink/apple.mbox", "+mbox/symlink/apple.mbox", 1 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+  char folder[256] = { 0 };
+
+  test_gen_path(folder, sizeof(folder), "%s");
+
+  struct Path path = {
+    .type = MUTT_MBOX,
+    .flags = MPATH_RESOLVED | MPATH_TIDY,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+
+    rc = mbox_path2_pretty(&path, folder);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc >= 0)
+    {
+      TEST_CHECK(path.pretty != NULL);
+      TEST_CHECK(mutt_str_strcmp(path.pretty, second) == 0);
+    }
+  }
+
+  test_gen_path(first, sizeof(first),  "%s/mbox/apple.mbox");
+  test_gen_path(second, sizeof(second), "~/mbox/apple.mbox");
+  path.orig = first;
+  HomeDir = test_get_test_dir();
+  rc = mbox_path2_pretty(&path, "nowhere");
+  TEST_CHECK(rc == 1);
+  TEST_CHECK(path.pretty != NULL);
+  TEST_CHECK(mutt_str_strcmp(path.pretty, second) == 0);
+
+  test_gen_path(first, sizeof(first), tests[0].first);
+  test_gen_path(second, sizeof(second), tests[0].first);
+  path.orig = first;
+  HomeDir = "/home/another";
+  rc = mbox_path2_pretty(&path, "nowhere");
+  TEST_CHECK(rc == 0);
+  TEST_CHECK(path.pretty != NULL);
+  TEST_CHECK(mutt_str_strcmp(path.pretty, second) == 0);
+}
+
+void test_mbox_path2_probe(void)
+{
+  // clang-format off
+  static const struct TestValue tests[] = {
+    { "%s/mbox/apple.mbox",          NULL,  0 }, // Empty
+    { "%s/mbox/banana.mbox",         NULL,  0 }, // Normal
+    { "%s/mbox/symlink/banana.mbox", NULL,  0 }, // Symlink
+    { "%s/mbox/cherry.mbox",         NULL, -1 }, // Junk
+    { "%s/mbox/damson.mbox",         NULL, -1 }, // Directory
+    { "%s/mbox/endive.mbox",         NULL, -1 }, // Unreadable
+    { "%s/mbox/fig.mbox",            NULL,  0 }, // Mmdf
+    { "%s/mbox/guava.mbox",          NULL,  0 }, // Missing
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+
+  struct Path path = { 0 };
+  struct stat st;
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+
+    path.orig = first;
+    TEST_CASE(path.orig);
+    path.type = MUTT_UNKNOWN;
+    path.flags = MPATH_NO_FLAGS;
+    memset(&st, 0, sizeof(st));
+    stat(path.orig, &st);
+    rc = mbox_path2_probe(&path, &st);
+    TEST_CHECK(rc == tests[i].retval);
+    if (rc == 0)
+    {
+      TEST_CHECK(path.type > MUTT_UNKNOWN);
+    }
+  }
+}
+
+void test_mbox_path2_tidy(void)
+{
+  // clang-format off
+  static const struct TestValue tests[] = {
+    { "%s/./mbox/../mbox///apple.mbox", "%s/mbox/apple.mbox", 0 },
+  };
+  // clang-format on
+
+  char first[256] = { 0 };
+  char second[256] = { 0 };
+
+  struct Path path = {
+    .type = MUTT_MBOX,
+    .flags = MPATH_RESOLVED,
+  };
+
+  int rc;
+  for (size_t i = 0; i < mutt_array_size(tests); i++)
+  {
+    test_gen_path(first, sizeof(first), tests[i].first);
+    test_gen_path(second, sizeof(second), tests[i].second);
+
+    path.orig = mutt_str_strdup(first);
+    rc = mbox_path2_tidy(&path);
+    TEST_CHECK(rc == 0);
+    TEST_CHECK(path.orig != NULL);
+    TEST_CHECK(path.flags & MPATH_TIDY);
+    TEST_CHECK(strcmp(path.orig, second) == 0);
+    FREE(&path.orig);
+  }
+}
