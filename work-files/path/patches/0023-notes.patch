From 9d9b46a187677c28deeefb4c02700615eb3862f1 Mon Sep 17 00:00:00 2001
From: Richard Russon <rich@flatcap.org>
Date: Thu, 5 Mar 2020 12:07:51 +0000
Subject: [PATCH 23/29] notes

---
 browser.c | 16 ++++++++++++++++
 muttlib.c |  1 +
 status.c  |  1 +
 3 files changed, 18 insertions(+)

diff --git a/browser.c b/browser.c
index 5485ae269..63003ef15 100644
--- a/browser.c
+++ b/browser.c
@@ -883,6 +883,7 @@ static int examine_mailboxes(struct Menu *menu, struct BrowserState *state)
       }
 
       mutt_buffer_strcpy(mailbox, mailbox_path(np->mailbox));
+      //JKJ this could be a file/dir or a mailbox!
       if (C_BrowserAbbreviateMailboxes)
         mutt_buffer_pretty_mailbox(mailbox);
 
@@ -1046,6 +1047,7 @@ static void init_menu(struct BrowserState *state, struct Menu *menu,
     {
       struct Buffer *path = mutt_buffer_pool_get();
       menu->is_mailbox_list = false;
+      //HBH path -> pretty (desc=no)
       mutt_buffer_copy(path, &LastDir);
       mutt_buffer_pretty_mailbox(path);
 #ifdef USE_IMAP
@@ -1068,12 +1070,15 @@ static void init_menu(struct BrowserState *state, struct Menu *menu,
    * The goal is to highlight the good directory if LastDir is the parent dir
    * of LastDirBackup (this occurs mostly when one hit "../"). It should also work
    * properly when the user is in examine_mailboxes-mode.  */
+  //HBH compare path->orig
   if (mutt_str_startswith(mutt_b2s(&LastDirBackup), mutt_b2s(&LastDir)))
   {
     char target_dir[PATH_MAX] = { 0 };
 
 #ifdef USE_IMAP
     /* Check what kind of dir LastDirBackup is. */
+    //HBH already have type
+    //HBH ask backend for parent of LastDirBackup, then swap into place
     if (imap_path_probe(mutt_b2s(&LastDirBackup), NULL) == MUTT_IMAP)
     {
       mutt_str_copy(target_dir, mutt_b2s(&LastDirBackup), sizeof(target_dir));
@@ -1112,6 +1117,7 @@ static void init_menu(struct BrowserState *state, struct Menu *menu,
 static int file_tag(struct Menu *menu, int sel, int act)
 {
   struct FolderFile *ff = &(((struct FolderFile *) menu->mdata)[sel]);
+  //HBH need to check MxOps::is_local?
   if (S_ISDIR(ff->mode) || (S_ISLNK(ff->mode) && link_is_dir(mutt_b2s(&LastDir), ff->name)))
   {
     mutt_error(_("Can't attach a directory"));
@@ -1138,10 +1144,12 @@ void mutt_browser_select_dir(const char *f)
 {
   init_lastdir();
 
+  //HBH set by string CurrentFolder, C_Spoolfile, <change-folder>, etc
   mutt_buffer_strcpy(&LastDirBackup, f);
 
   /* Method that will fetch the parent path depending on the type of the path. */
   char buf[PATH_MAX];
+  //HBH backend get parent
   mutt_get_parent_path(mutt_b2s(&LastDirBackup), buf, sizeof(buf));
   mutt_buffer_strcpy(&LastDir, buf);
 }
@@ -1201,6 +1209,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
 
   mailbox = mailbox && folder;
 
+  //HBH backup of
   struct Buffer *OldLastDir = mutt_buffer_pool_get();
   struct Buffer *tmp = mutt_buffer_pool_get();
   struct Buffer *buf = mutt_buffer_pool_get();
@@ -1244,6 +1253,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
       state.imap_browse = true;
       if (imap_browse(mutt_b2s(file), &state) == 0)
       {
+        //HBH copy imap-only string (Mailbox)
         mutt_buffer_strcpy(&LastDir, state.folder);
         browser_sort(&state);
       }
@@ -1257,10 +1267,12 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
 
       if (i > 0)
       {
+        //HBH strings, local file/dirs
         if ((mutt_b2s(file))[0] == '/')
           mutt_buffer_strcpy_n(&LastDir, mutt_b2s(file), i);
         else
         {
+          //HBH strings, local file/dirs
           mutt_path_getcwd(&LastDir);
           mutt_buffer_addch(&LastDir, '/');
           mutt_buffer_addstr_n(&LastDir, mutt_b2s(file), i);
@@ -1268,6 +1280,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
       }
       else
       {
+        //HBH strings, local file/dirs
         if ((mutt_b2s(file))[0] == '/')
           mutt_buffer_strcpy(&LastDir, "/");
         else
@@ -1286,6 +1299,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
   else
   {
     if (!folder)
+      //HBH strings, local file/dirs
       mutt_path_getcwd(&LastDir);
     else
     {
@@ -1323,6 +1337,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
         {
           /* If browsing in "local"-mode, than we chose to define LastDir to
            * MailDir */
+          //HBH already known
           switch (CurrentFolder->type)
           {
             case MUTT_IMAP:
@@ -1352,6 +1367,7 @@ void mutt_buffer_select_file(struct Buffer *file, SelectFileFlags flags,
     }
 
 #ifdef USE_IMAP
+    //HBH type already known
     if (!mailbox && (imap_path_probe(mutt_b2s(&LastDir), NULL) == MUTT_IMAP))
     {
       init_state(&state, NULL);
diff --git a/muttlib.c b/muttlib.c
index 663585e0f..cc74d1f8b 100644
--- a/muttlib.c
+++ b/muttlib.c
@@ -692,6 +692,7 @@ void mutt_buffer_pretty_mailbox(struct Buffer *buf)
   /* This reduces the size of the Buffer, so we can pass it through.
    * We adjust the size just to make sure buf->data is not NULL though */
   mutt_buffer_alloc(buf, PATH_MAX);
+  //JKJ redirect
   mutt_pretty_mailbox(buf->data, buf->dsize);
   mutt_buffer_fix_dptr(buf);
 }
diff --git a/status.c b/status.c
index 9019f6c69..ca7410b02 100644
--- a/status.c
+++ b/status.c
@@ -142,6 +142,7 @@ static const char *status_format_str(char *buf, size_t buflen, size_t col, int c
     case 'f':
     {
       struct Mailbox *m = Context ? Context->mailbox : NULL;
+      //JKJ this could be a file/dir or a mailbox!
       if (m)
         mx_path2_pretty(m->path, C_Folder, (op == 'D'));
 
