diff --git a/attach/attach.c b/attach/attach.c
@@ @@
  if (actx->idxlen == actx->idxmax)
  {
    actx->idxmax += grow;
    mutt_mem_reallocarray(&actx->idx, actx->idxmax, sizeof(struct AttachPtr *));
    mutt_mem_reallocarray(&actx->v2r, actx->idxmax, sizeof(short));

    memset(&actx->idx[actx->idxlen], 0, grow * sizeof(struct AttachPtr *));
    memset(&actx->v2r[actx->idxlen], 0, grow * sizeof(short));
@@ @@
  if (actx->idxlen == actx->idxmax)
  {
    actx->idxmax += 5;
    mutt_mem_reallocarray(&actx->idx, actx->idxmax, sizeof(struct AttachPtr *));
    mutt_mem_reallocarray(&actx->v2r, actx->idxmax, sizeof(short));
    for (int i = actx->idxlen; i < actx->idxmax; i++)
      actx->idx[i] = NULL;
  }
@@ @@
  if (actx->fp_len == actx->fp_max)
  {
    actx->fp_max += 5;
    mutt_mem_reallocarray(&actx->fp_idx, actx->fp_max, sizeof(FILE *));
    for (int i = actx->fp_len; i < actx->fp_max; i++)
      actx->fp_idx[i] = NULL;
  }
@@ @@
  if (actx->body_len == actx->body_max)
  {
    actx->body_max += 5;
    mutt_mem_reallocarray(&actx->body_idx, actx->body_max, sizeof(struct Body *));
    for (int i = actx->body_len; i < actx->body_max; i++)
      actx->body_idx[i] = NULL;
  }
diff --git a/autocrypt/db.c b/autocrypt/db.c
@@ @@
    if (results_count == results_len)
    {
      results_len += 5;
      mutt_mem_reallocarray(&results, results_len, sizeof(struct AutocryptAccount *));
    }

    struct AutocryptAccount *account = mutt_autocrypt_db_account_new();
diff --git a/browser/complete.c b/browser/complete.c
@@ @@
  if (mutt_complete(wdata->cd, wdata->buffer) == 0)
  {
    wdata->templen = wdata->state->lastchar;
    mutt_mem_reallocarray(&wdata->tempbuf, wdata->templen, sizeof(wchar_t));
    if (wdata->tempbuf)
      wmemcpy(wdata->tempbuf, wdata->state->wbuf, wdata->templen);
  }
@@ @@
  if (mutt_complete(wdata->cd, wdata->buffer) == 0)
  {
    wdata->templen = wdata->state->lastchar - i;
    mutt_mem_reallocarray(&wdata->tempbuf, wdata->templen, sizeof(wchar_t));
    if (wdata->tempbuf)
      wmemcpy(wdata->tempbuf, wdata->state->wbuf + i, wdata->templen);
  }
diff --git a/complete/helpers.c b/complete/helpers.c
@@ @@

  new_size = ROUND_UP(new_size + 2, 512);

  mutt_mem_reallocarray(&cd->match_list, new_size, sizeof(char *));
  memset(&cd->match_list[cd->match_list_len], 0, new_size - cd->match_list_len);

  cd->match_list_len = new_size;
diff --git a/copy.c b/copy.c
@@ @@
      {
        size_t blen = mutt_str_len(buf);

        mutt_mem_reallocarray(&this_one, this_one_len + blen + 1, sizeof(char));
        mutt_strn_copy(this_one + this_one_len, buf, blen, blen + 1);
        this_one_len += blen;
      }
diff --git a/editor/functions.c b/editor/functions.c
@@ @@
    if (es->curpos + savelen > es->wbuflen)
    {
      es->wbuflen = es->curpos + savelen;
      mutt_mem_reallocarray(&es->wbuf, es->wbuflen, sizeof(wchar_t));
    }

    /* Restore suffix */
diff --git a/editor/state.c b/editor/state.c
@@ @@
    return;

  num = ROUND_UP(num + 4, 128);
  mutt_mem_reallocarray(&es->wbuf, num, sizeof(wchar_t));

  wmemset(es->wbuf + es->wbuflen, 0, num - es->wbuflen);

diff --git a/editor/window.c b/editor/window.c
@@ @@
    if (wdata->state->lastchar >= wdata->state->wbuflen)
    {
      wdata->state->wbuflen = wdata->state->lastchar + 20;
      mutt_mem_reallocarray(&wdata->state->wbuf, wdata->state->wbuflen, sizeof(wchar_t));
    }
    memmove(wdata->state->wbuf + wdata->state->curpos + 1, wdata->state->wbuf + wdata->state->curpos,
diff --git a/email/rfc2047.c b/email/rfc2047.c
@@ @@
    if ((bufpos + wlen + lb_len) > buflen)
    {
      buflen = bufpos + wlen + lb_len;
      mutt_mem_reallocarray(&buf, buflen, sizeof(char));
    }
    r = encode_block(buf + bufpos, t, n, icode, tocode, encoder);
    ASSERT(r == wlen);
@@ @@

  /* Add last encoded word and us-ascii suffix to buffer. */
  buflen = bufpos + wlen + (u + ulen - t1);
  mutt_mem_reallocarray(&buf, buflen + 1, sizeof(char));
  r = encode_block(buf + bufpos, t, t1 - t, icode, tocode, encoder);
  ASSERT(r == wlen);
  bufpos += wlen;
diff --git a/email/rfc2231.c b/email/rfc2231.c
@@ @@

      const size_t vl = strlen(par->value);

      mutt_mem_reallocarray(&value, l + vl + 1, sizeof(char));
      strcpy(value + l, par->value);
      l += vl;

diff --git a/enriched.c b/enriched.c
@@ @@
    if (enriched->line_used > enriched->line_max)
    {
      enriched->line_max = enriched->line_used;
      mutt_mem_reallocarray(&enriched->line, enriched->line_max + 1, sizeof(wchar_t));
    }
    wcscat(enriched->line, enriched->buffer);
    enriched->line_len += enriched->word_len;
@@ @@
    if (enriched->tag_level[RICH_COLOR])
    {
      if ((enriched->param_used + 1) >= enriched->param_len)
        mutt_mem_reallocarray(&enriched->param, (enriched->param_len += 256), sizeof(wchar_t));

      enriched->param[enriched->param_used++] = c;
    }
@@ @@
  if ((enriched->buf_len < (enriched->buf_used + 3)) || !enriched->buffer)
  {
    enriched->buf_len += 1024;
    mutt_mem_reallocarray(&enriched->buffer, enriched->buf_len + 1, sizeof(wchar_t));
  }

  if ((!enriched->tag_level[RICH_NOFILL] && iswspace(c)) || (c == (wchar_t) '\0'))
@@ @@
  if ((enriched->buf_len < (enriched->buf_used + mutt_str_len(s))) || !enriched->buffer)
  {
    enriched->buf_len += 1024;
    mutt_mem_reallocarray(&enriched->buffer, enriched->buf_len + 1, sizeof(wchar_t));
  }
  c = s;
  while (*c)
diff --git a/imap/auth_sasl.c b/imap/auth_sasl.c
@@ @@
        if (len > bufsize)
        {
          bufsize = len;
          mutt_mem_reallocarray(&buf, bufsize, sizeof(char));
        }
        /* For sasl_decode64, the fourth parameter, outmax, doesn't
         * include space for the trailing null */
@@ @@
      if ((olen * 2) > bufsize)
      {
        bufsize = olen * 2;
        mutt_mem_reallocarray(&buf, bufsize, sizeof(char));
      }
      if (sasl_encode64(pc, olen, buf, bufsize, &olen) != SASL_OK)
      {
diff --git a/imap/command.c b/imap/command.c
@@ @@
  {
    if (len == adata->blen)
    {
      mutt_mem_reallocarray(&adata->buf, adata->blen + IMAP_CMD_BUFSIZE, sizeof(char));
      adata->blen = adata->blen + IMAP_CMD_BUFSIZE;
      mutt_debug(LL_DEBUG3, "grew buffer to %zu bytes\n", adata->blen);
    }
@@ @@
  /* don't let one large string make cmd->buf hog memory forever */
  if ((adata->blen > IMAP_CMD_BUFSIZE) && (len <= IMAP_CMD_BUFSIZE))
  {
    mutt_mem_reallocarray(&adata->buf, IMAP_CMD_BUFSIZE, sizeof(char));
    adata->blen = IMAP_CMD_BUFSIZE;
    mutt_debug(LL_DEBUG3, "shrank buffer to %zu bytes\n", adata->blen);
  }
diff --git a/imap/utf7.c b/imap/utf7.c
@@ @@
  if (u8len)
    *u8len = p - buf;

  mutt_mem_reallocarray(&buf, p - buf, sizeof(char));
  if (u8)
    *u8 = buf;
  return buf;
@@ @@
  *p++ = '\0';
  if (u7len)
    *u7len = p - buf;
  mutt_mem_reallocarray(&buf, p - buf, sizeof(char));
  if (u7)
    *u7 = buf;
  return buf;
diff --git a/index/dlg_index.c b/index/dlg_index.c
@@ @@
      if (!found)
      {
        chunks++;
        mutt_mem_reallocarray(&syntax, chunks, sizeof(struct StatusSyntax));
      }

      i = chunks - 1;
diff --git a/mh/sequence.c b/mh/sequence.c
@@ @@

  const int newmax = i + 128;
  int j = mhs->flags ? mhs->max + 1 : 0;
  mutt_mem_reallocarray(&mhs->flags, newmax + 1, sizeof(mhs->flags[0]));
  while (j <= newmax)
    mhs->flags[j++] = 0;

diff --git a/monitor.c b/monitor.c
@@ @@
    if (PollFdsCount == PollFdsLen)
    {
      PollFdsLen += 2;
      mutt_mem_reallocarray(&PollFds, PollFdsLen, sizeof(struct pollfd));
    }
    PollFdsCount++;
    PollFds[i].fd = fd;
diff --git a/mutt/buffer.c b/mutt/buffer.c
@@ @@

  buf->dsize = ROUND_UP(new_size + 1, BufferStepSize);

  mutt_mem_reallocarray(&buf->data, buf->dsize, sizeof(char));
  buf->dptr = buf->data + offset;

  // Ensures that initially NULL buf->data is properly terminated
diff --git a/mutt/envlist.c b/mutt/envlist.c
@@ @@
  else
  {
    // not found, add a new entry
    mutt_mem_reallocarray(envp, count + 2, sizeof(char *));
    (*envp)[count] = mutt_str_dup(work);
    (*envp)[count + 1] = NULL;
  }
@@ @@
      // Move down the later entries
      memmove(&(*envp)[match], &(*envp)[match + 1], (count - match) * sizeof(char *));
      // Shrink the array
      mutt_mem_reallocarray(envp, count, sizeof(char *));
      return true;
    }
  }
diff --git a/mutt/file.c b/mutt/file.c
@@ @@
        /* There wasn't room for the line -- increase "line" */
        offset = *size - 1; /* overwrite the terminating 0 */
        *size += 256;
        mutt_mem_reallocarray(&line, *size, sizeof(char));
      }
    }
  }
diff --git a/mutt/mbyte.c b/mutt/mbyte.c
@@ @@
      if (i >= wbuflen)
      {
        wbuflen = i + 20;
        mutt_mem_reallocarray(&wbuf, wbuflen, sizeof(*wbuf));
      }
      wbuf[i++] = wc;
    }
@@ @@
      if (i >= wbuflen)
      {
        wbuflen = i + 20;
        mutt_mem_reallocarray(&wbuf, wbuflen, sizeof(*wbuf));
      }
      wbuf[i++] = ReplacementChar;
      buf++;
diff --git a/mutt/pool.c b/mutt/pool.c
@@ @@
  BufferPoolLen += BufferPoolIncrement;
  mutt_debug(LL_DEBUG1, "%zu\n", BufferPoolLen);

  mutt_mem_reallocarray(&BufferPool, BufferPoolLen, sizeof(struct Buffer *));
  while (BufferPoolCount < BufferPoolIncrement)
  {
    struct Buffer *newbuf = buf_new(NULL);
@@ @@
      (buf->dsize < BufferPoolInitialBufferSize))
  {
    buf->dsize = BufferPoolInitialBufferSize;
    mutt_mem_reallocarray(&buf->data, buf->dsize, sizeof(char));
  }
  buf_reset(buf);
  BufferPool[BufferPoolCount++] = buf;
diff --git a/mutt/regex.c b/mutt/regex.c
@@ @@
    /* If this pattern needs more matches, expand pmatch. */
    if (np->nmatch > nmatch)
    {
      mutt_mem_reallocarray(&pmatch, np->nmatch, sizeof(regmatch_t));
      nmatch = np->nmatch;
    }

@@ @@
    /* If this pattern needs more matches, expand pmatch. */
    if (np->nmatch > nmatch)
    {
      mutt_mem_reallocarray(&pmatch, np->nmatch, sizeof(regmatch_t));
      nmatch = np->nmatch;
    }

diff --git a/mutt/string.c b/mutt/string.c
@@ @@
{
  if (!ptr || !*ptr)
    return;
  mutt_mem_reallocarray(ptr, strlen(*ptr) + 1, sizeof(char));
}

/**
@@ @@
      if (n == 0) /* convention is to use NULL for zero-length strings. */
        FREE(strp);
      else if (n != rlen - 1)
        mutt_mem_reallocarray(strp, n + 1, sizeof(char));
      return n;
    }
    /* increase size and try again */
    rlen = n + 1;
    mutt_mem_reallocarray(strp, rlen, sizeof(char));
  }
  /* not reached */
}
diff --git a/mutt_thread.c b/mutt_thread.c
@@ @@
        for (i = 0; thread; i++, thread = thread->prev)
        {
          if (i >= array_size)
            mutt_mem_reallocarray(&array, (array_size *= 2), sizeof(struct MuttThread *));

          array[i] = thread;
        }
diff --git a/mx.c b/mx.c
@@ @@

  if (m->emails)
  {
    mutt_mem_reallocarray(&m->emails, req_size, sizeof(struct Email *));
    mutt_mem_reallocarray(&m->v2r, req_size, sizeof(int));
  }
  else
  {
diff --git a/ncrypt/crypt.c b/ncrypt/crypt.c
@@ @@
  if (!oppenc_mode && self_encrypt)
  {
    const size_t keylist_size = mutt_str_len(*keylist);
    mutt_mem_reallocarray(keylist, keylist_size + mutt_str_len(self_encrypt) + 2, sizeof(char));
    sprintf(*keylist + keylist_size, " %s", self_encrypt);
  }

@@ @@
    else
    {
      if ((*n % 5) == 0)
        mutt_mem_reallocarray(b_sigs, *n + 6, sizeof(struct Body *));

      (*b_sigs)[(*n)++] = b;
    }
diff --git a/ncrypt/crypt_gpgme.c b/ncrypt/crypt_gpgme.c
@@ @@

    bypass_selection:
      keylist_size += mutt_str_len(keyid) + 4 + 1;
      mutt_mem_reallocarray(&keylist, keylist_size, sizeof(char));
      sprintf(keylist + keylist_used, "%s0x%s%s", keylist_used ? " " : "", keyid, forced_valid ? "!" : "");
      keylist_used = mutt_str_len(keylist);
diff --git a/ncrypt/dlg_gpgme.c b/ncrypt/dlg_gpgme.c
@@ @@
    if (i == keymax)
    {
      keymax += 20;
      mutt_mem_reallocarray(&key_table, keymax, sizeof(struct CryptKeyInfo *));
    }

    key_table[i++] = k;
diff --git a/ncrypt/dlg_pgp.c b/ncrypt/dlg_pgp.c
@@ @@
      if (i == keymax)
      {
        keymax += 5;
        mutt_mem_reallocarray(&key_table, keymax, sizeof(struct PgpUid *));
      }

      key_table[i++] = a;
diff --git a/ncrypt/dlg_smime.c b/ncrypt/dlg_smime.c
@@ @@
    if (table_index == table_size)
    {
      table_size += 5;
      mutt_mem_reallocarray(&table, table_size, sizeof(struct SmimeKey *));
    }

    table[table_index++] = key;
diff --git a/ncrypt/pgp.c b/ncrypt/pgp.c
@@ @@

    bypass_selection:
      keylist_size += mutt_str_len(keyid) + 4;
      mutt_mem_reallocarray(&keylist, keylist_size, sizeof(char));
      sprintf(keylist + keylist_used, "%s0x%s", keylist_used ? " " : "", keyid);
      keylist_used = mutt_str_len(keylist);

diff --git a/ncrypt/pgppacket.c b/ncrypt/pgppacket.c
@@ @@
  {
    PacketBufLen = *used + material + CHUNK_SIZE;

    mutt_mem_reallocarray(&PacketBuf, PacketBufLen, sizeof(unsigned char));
  }

  if (fread(PacketBuf + *used, 1, material, fp) < material)
diff --git a/ncrypt/smime.c b/ncrypt/smime.c
@@ @@

    keyid = key->hash;
    keylist_size += mutt_str_len(keyid) + 2;
    mutt_mem_reallocarray(&keylist, keylist_size, sizeof(char));
    sprintf(keylist + keylist_used, "%s%s", keylist_used ? " " : "", keyid);
    keylist_used = mutt_str_len(keylist);

diff --git a/nntp/newsrc.c b/nntp/newsrc.c
@@ @@
    if (mdata->last_message == 0)
      mdata->last_message = mdata->newsrc_ent[j - 1].last;
    mdata->newsrc_len = j;
    mutt_mem_reallocarray(&mdata->newsrc_ent, j, sizeof(struct NewsrcEntry));
    nntp_group_unread_stat(mdata);
    mutt_debug(LL_DEBUG2, "%s\n", mdata->group);
  }
@@ @@
        if (mdata->newsrc_len >= entries)
        {
          entries *= 2;
          mutt_mem_reallocarray(&mdata->newsrc_ent, entries, sizeof(struct NewsrcEntry));
        }
        mdata->newsrc_ent[mdata->newsrc_len].first = first;
        mdata->newsrc_ent[mdata->newsrc_len].last = last - 1;
@@ @@
    if (mdata->newsrc_len >= entries)
    {
      entries++;
      mutt_mem_reallocarray(&mdata->newsrc_ent, entries, sizeof(struct NewsrcEntry));
    }
    mdata->newsrc_ent[mdata->newsrc_len].first = first;
    mdata->newsrc_ent[mdata->newsrc_len].last = mdata->last_loaded;
    mdata->newsrc_len++;
  }
  mutt_mem_reallocarray(&mdata->newsrc_ent, mdata->newsrc_len, sizeof(struct NewsrcEntry));

  if (c_sort != SORT_ORDER)
  {
@@ @@
    if ((off + strlen(mdata->group) + 3) > buflen)
    {
      buflen *= 2;
      mutt_mem_reallocarray(&buf, buflen, sizeof(char));
    }
    snprintf(buf + off, buflen - off, "%s%c ", mdata->group, mdata->subscribed ? ':' : '!');
    off += strlen(buf + off);
@@ @@
      if ((off + 1024) > buflen)
      {
        buflen *= 2;
        mutt_mem_reallocarray(&buf, buflen, sizeof(char));
      }
      if (j)
        buf[off++] = ',';
@@ @@
    if ((off + strlen(mdata->group) + (mdata->desc ? strlen(mdata->desc) : 0) + 50) > buflen)
    {
      buflen *= 2;
      mutt_mem_reallocarray(&buf, buflen, sizeof(char));
    }
    snprintf(buf + off, buflen - off, "%s " ANUM_FMT " " ANUM_FMT " %c%s%s\n", mdata->group, mdata->last_message, mdata->first_message,
@@ @@

  if (mdata->newsrc_ent)
  {
    mutt_mem_reallocarray(&mdata->newsrc_ent, 1, sizeof(struct NewsrcEntry));
    mdata->newsrc_len = 1;
    mdata->newsrc_ent[0].first = 1;
    mdata->newsrc_ent[0].last = mdata->last_message;
@@ @@

  if (mdata->newsrc_ent)
  {
    mutt_mem_reallocarray(&mdata->newsrc_ent, 1, sizeof(struct NewsrcEntry));
    mdata->newsrc_len = 1;
    mdata->newsrc_ent[0].first = 1;
    mdata->newsrc_ent[0].last = mdata->first_message - 1;
diff --git a/nntp/nntp.c b/nntp/nntp.c
@@ @@
        if ((buflen - off) < 1024)
        {
          buflen *= 2;
          mutt_mem_reallocarray(&adata->overview_fmt, buflen, sizeof(char));
        }

        const int chunk = mutt_socket_readln_d(adata->overview_fmt + off,
@@ @@
        }
      }
      adata->overview_fmt[off++] = '\0';
      mutt_mem_reallocarray(&adata->overview_fmt, off, sizeof(char));
    }
  }
  rc = 0; // Success
@@ @@
        off = 0;
      }

      mutt_mem_reallocarray(&line, off + sizeof(buf), sizeof(char));
    }
    FREE(&line);
    func(NULL, data);
@@ @@
    mdata->last_cached = 0;
    if (mdata->newsrc_len)
    {
      mutt_mem_reallocarray(&mdata->newsrc_ent, 1, sizeof(struct NewsrcEntry));
      mdata->newsrc_len = 1;
      mdata->newsrc_ent[0].first = 1;
      mdata->newsrc_ent[0].last = 0;
@@ @@
  if (cc->num >= cc->max)
  {
    cc->max *= 2;
    mutt_mem_reallocarray(&cc->child, cc->max, sizeof(anum_t));
  }
  cc->child[cc->num++] = anum;
  return 0;
diff --git a/pager/display.c b/pager/display.c
@@ @@
        }
        if (++(lines[line_num].syntax_arr_size) > 1)
        {
          mutt_mem_reallocarray(&(lines[line_num].syntax), lines[line_num].syntax_arr_size, sizeof(struct TextSyntax));
          // Zero the new entry
          const int index = lines[line_num].syntax_arr_size - 1;
          struct TextSyntax *ts = &lines[line_num].syntax[index];
@@ @@
      if (lines[i].syntax_arr_size)
      {
        lines[i].syntax_arr_size = 0;
        mutt_mem_reallocarray(&(lines[line_num].syntax), 1, sizeof(struct TextSyntax));
      }
      lines[i++].cid = MT_COLOR_SIGNATURE;
    }
@@ @@
          {
            if (++(lines[line_num].syntax_arr_size) > 1)
            {
              mutt_mem_reallocarray(&(lines[line_num].syntax), lines[line_num].syntax_arr_size, sizeof(struct TextSyntax));
              // Zero the new entry
              const int index = lines[line_num].syntax_arr_size - 1;
              struct TextSyntax *ts = &lines[line_num].syntax[index];
@@ @@

  if (*lines_used == *lines_max)
  {
    mutt_mem_reallocarray(lines, (*lines_max += LINES), sizeof(struct Line));
    for (ch = *lines_used; ch < *lines_max; ch++)
    {
      memset(&((*lines)[ch]), 0, sizeof(struct Line));
@@ @@
    {
      if (++(cur_line->search_arr_size) > 1)
      {
        mutt_mem_reallocarray(&(cur_line->search), cur_line->search_arr_size, sizeof(struct TextSyntax));
        // Zero the new entry
        const int index = cur_line->search_arr_size - 1;
        struct TextSyntax *ts = &cur_line->search[index];
diff --git a/pager/pager.c b/pager/pager.c
@@ @@
        priv->lines[i].search_arr_size = -1;
        priv->lines[i].quote = NULL;

        mutt_mem_reallocarray(&(priv->lines[i].syntax), 1, sizeof(struct TextSyntax));
        if (priv->search_compiled && priv->lines[i].search)
          FREE(&(priv->lines[i].search));
      }
diff --git a/pop/auth.c b/pop/auth.c
@@ @@
      if ((olen * 2) > bufsize)
      {
        bufsize = olen * 2;
        mutt_mem_reallocarray(&buf, bufsize, sizeof(char));
      }
      if (sasl_encode64(pc, olen, buf, bufsize, &olen) != SASL_OK)
      {
diff --git a/pop/lib.c b/pop/lib.c
@@ @@
      lenbuf = 0;
    }

    mutt_mem_reallocarray(&inbuf, lenbuf + sizeof(buf), sizeof(char));
  }

  FREE(&inbuf);
diff --git a/send/sendlib.c b/send/sendlib.c
@@ @@
      continue;

    rfc2047_encode(&tmp, NULL, i + 2, c_send_charset);
    mutt_mem_reallocarray(&np->data, i + 2 + mutt_str_len(tmp) + 1, sizeof(char));

    sprintf(np->data + i + 2, "%s", tmp);

