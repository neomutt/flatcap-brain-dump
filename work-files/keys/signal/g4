alias/alias.c:616:  if (mutt_istr_equal(buf_string(addr->mailbox), Username))
alias/alias.c:618:    mutt_debug(LL_DEBUG5, "#1 yes, %s = %s\n", buf_string(addr->mailbox), Username);
alias/alias.c:621:  if (string_is_address(buf_string(addr->mailbox), Username, ShortHostname))
alias/alias.c:624:               Username, ShortHostname);
alias/alias.c:628:  if (string_is_address(buf_string(addr->mailbox), Username, fqdn))
alias/alias.c:631:               Username, NONULL(fqdn));
alias/alias.c:635:  if (string_is_address(buf_string(addr->mailbox), Username, fqdn))
alias/alias.c:638:               Username, NONULL(fqdn));
alias/dlg_query.c:282:  pid_t pid = filter_create(buf_string(cmd), NULL, &fp, NULL, EnvList);
attach/mutt_attach.c:342:  STAILQ_FOREACH(np, &MimeLookupList, entries)
attach/mutt_attach.c:447:  envlist_set(&EnvList, "COLUMNS", columns, true);
attach/mutt_attach.c:560:                             use_pager ? fd_pager : -1, -1, EnvList);
attach/mutt_attach.c:707:      /* add temporary file to TempAttachmentsList to be deleted on timeout hook */
attach/mutt_attach.c:720:  envlist_unset(&EnvList, "COLUMNS");
attach/mutt_attach.c:763:    pid = filter_create_fd(path, &fp_filter, NULL, NULL, -1, out, -1, EnvList);
attach/mutt_attach.c:765:    pid = filter_create(path, &fp_filter, NULL, NULL, EnvList);
attach/mutt_attach.c:1189:      pid = filter_create(buf_string(cmd), &fp_out, NULL, NULL, EnvList);
attach/mutt_attach.c:1254:      pid = filter_create(NONULL(c_print_command), &fp_out, NULL, NULL, EnvList);
attach/mutt_attach.c:1298:  mutt_list_insert_tail(&TempAttachmentsList, mutt_str_dup(filename));
attach/mutt_attach.c:1308:  STAILQ_FOREACH(np, &TempAttachmentsList, entries)
attach/mutt_attach.c:1314:  mutt_list_free(&TempAttachmentsList);
attach/recvattach.c:747:    pid_t pid = filter_create(buf_string(buf), &state.fp_out, NULL, NULL, EnvList);
attach/recvattach.c:911:    pid_t pid = filter_create(NONULL(c_print_command), &state.fp_out, NULL, NULL, EnvList);
autocrypt/gpgme.c:235:  OptAutocryptGpgme = true;
autocrypt/gpgme.c:262:  OptAutocryptGpgme = false;
browser/dlg_browser.c:612:  if (OptNews)
browser/dlg_browser.c:651:  if (OptNews)
browser/dlg_browser.c:779:  if (OptNews)
browser/dlg_browser.c:881:  if (OptNews)
browser/dlg_browser.c:903:  if (OptNews)
browser/dlg_browser.c:975:  if (OptNews)
browser/dlg_browser.c:1243:  if (OptNews)
browser/dlg_browser.c:1339:       * or when CurrentFolder and LastDirBackup are not the same.
browser/dlg_browser.c:1343:       * We only do this when CurrentFolder has been set (ie, not
browser/dlg_browser.c:1348:      if (CurrentFolder)
browser/dlg_browser.c:1354:          switch (mx_path_probe(CurrentFolder))
browser/dlg_browser.c:1371:              mutt_browser_select_dir(CurrentFolder);
browser/dlg_browser.c:1375:        else if (!mutt_str_equal(CurrentFolder, buf_string(&LastDirBackup)))
browser/dlg_browser.c:1377:          mutt_browser_select_dir(CurrentFolder);
browser/dlg_browser.c:1413:  if (OptNews)
browser/functions.c:182:  if (OptNews)
browser/functions.c:303:  if (!OptNews)
browser/functions.c:343:  if (OptNews)
browser/functions.c:757:            buf_strcpy(&LastDir, NONULL(HomeDir));
browser/functions.c:779:  if (priv->state.is_mailbox_list || OptNews)
browser/functions.c:801:  if (!OptNews)
browser/functions.c:945:  if (!OptNews)
browser/sort.c:192:      if (OptNews)
color/command.c:230:  if (OptNoCurses) // No GUI, so quietly discard the command
color/command.c:478:  if (OptNoCurses) // No GUI, so quietly discard the command
color/command.c:510:  if (OptNoCurses || (COLORS == 0))
color/command.c:532:  if (OptNoCurses || (COLORS != 0))
complete/complete.c:71:  if (OptNews)
compmbox/compress.c:911:  mutt_path_canon(path, HomeDir, false);
compose/cbar.c:123:      snprintf(buf, buflen, fmt, NONULL(ShortHostname));
compose/dlg_compose.c:323:  if (OptNewsSend)
compose/dlg_compose.c:343:    OptNews = false; /* for any case */
compose/functions.c:819:  OptNews = false;
compose/functions.c:828:    OptNews = true;
compose/functions.c:849:  if (OptNews)
compose/functions.c:858:      if (!OptNews && (nntp_path_probe(buf_string(fname), NULL) != MUTT_NNTP))
conn/accountcmd.c:139:  pid_t pid = filter_create(buf_string(cmd), NULL, &fp, NULL, EnvList);
conn/connaccount.c:65:    if (!OptNoCurses)
conn/connaccount.c:69:  else if (OptNoCurses)
conn/connaccount.c:77:    /* L10N: Example: Username at myhost.com */
conn/connaccount.c:78:    snprintf(prompt, sizeof(prompt), _("Username at %s: "), cac->host);
conn/connaccount.c:79:    mutt_str_copy(cac->user, Username, sizeof(cac->user));
conn/connaccount.c:144:    if (!OptNoCurses)
conn/connaccount.c:148:  else if (OptNoCurses)
conn/connaccount.c:215:  pid_t pid = filter_create(cmd, NULL, &fp, NULL, EnvList);
conn/connaccount.c:228:  if (!OptNoCurses)
conn/gnutls.c:965:  if (!OptNoCurses)
conn/openssl.c:567:    buf_printf(path, "%s/.entropy", NONULL(HomeDir));
conn/raw.c:166:  if (!OptNoCurses)
conn/raw.c:181:  if (!OptNoCurses)
conn/raw.c:223:  if (!OptNoCurses)
conn/raw.c:239:  if (!OptNoCurses)
conn/sasl.c:716:    if (OptNoCurses ||
conn/tunnel.c:106:    execle(EXEC_SHELL, "sh", "-c", c_tunnel, NULL, EnvList);
core/tmp.c:55:             NONULL(prefix), NONULL(ShortHostname), (int) getuid(),
envelope/window.c:1011:  wdata->is_news = OptNewsSend;
fuzz/address.c:28:  OptNoCurses = true;
gui/curs_lib.c:81:  if (OptKeepQuiet)
gui/curs_lib.c:85:  if (!ARRAY_EMPTY(&MacroEvents) && !OptForceRefresh)
gui/curs_lib.c:155:  if (OptNoCurses)
gui/mutt_window.c:346:  if (OptNoCurses)
imap/util.c:986:  OptKeepQuiet = true;
imap/util.c:1014:  OptKeepQuiet = false;
imap/util.c:1065:  const char *user = NONULL(Username);
index/dlg_index.c:656:    FREE(&LastFolder);
index/dlg_index.c:657:    LastFolder = new_last_folder;
index/dlg_index.c:659:  mutt_str_replace(&CurrentFolder, mailbox_path(m));
index/dlg_index.c:757:  if (OptNews)
index/dlg_index.c:759:    OptNews = false;
index/dlg_index.c:1121:    if (OptNeedResort && shared->mailbox && (shared->mailbox->msg_count != 0) &&
index/dlg_index.c:1326:    OptNews = false; /* for any case */
index/functions.c:623:  OptNeedResort = false;
index/functions.c:660:    OptNeedResort = false;
index/functions.c:2777:  OptNews = false;
index/functions.c:2799:  OptNews = true;
index/index.c:213:  OptResortInit = true; /* trigger a redraw of the index */
index/index.c:339:    OptNeedResort = true;
index/index.c:341:    OptResortInit = true;
index/index.c:343:    OptSortSubthreads = true;
key/get.c:215:  if (OptNoCurses)
maildir/message.c:390:               mutt_rand64(), NONULL(ShortHostname), suffix);
maildir/message.c:560:             mutt_rand64(), NONULL(ShortHostname), suffix);
maildir/path.c:46:  mutt_path_canon(path, HomeDir, true);
mbox/mbox.c:1324:               NONULL(Username), NONULL(ShortHostname), (unsigned int) getpid());
mbox/mbox.c:1611:  mutt_path_canon(path, HomeDir, false);
mh/mh.c:1190:  mutt_path_canon(path, HomeDir, true);
mh/shared.c:85:             NONULL(ShortHostname), (int) getpid(), mutt_rand64());
mixmaster/mixmaster.c:125:    if (!OptNoCurses)
mixmaster/remailer.c:134:                                  fd_null, EnvList);
ncrypt/crypt.c:862:    OptDontHandlePgpKeys = true;
ncrypt/crypt.c:930:    OptDontHandlePgpKeys = false;
ncrypt/crypt.c:974:    OptPgpCheckTrust = true;
ncrypt/crypt.c:992:      OptPgpCheckTrust = false;
ncrypt/cryptglue.c:217:    OptAutocryptGpgme = true;
ncrypt/cryptglue.c:219:    OptAutocryptGpgme = false;
ncrypt/cryptglue.c:254:    OptAutocryptGpgme = true;
ncrypt/cryptglue.c:256:    OptAutocryptGpgme = false;
ncrypt/cryptglue.c:347:    OptAutocryptGpgme = true;
ncrypt/cryptglue.c:349:    OptAutocryptGpgme = false;
ncrypt/crypt_gpgme.c:368:  if (!err && OptAutocryptGpgme)
ncrypt/crypt_gpgme.c:722:  else if (OptAutocryptGpgme)
ncrypt/crypt_gpgme.c:1747:    if (OptAutocryptGpgme)
ncrypt/crypt_gpgme.c:2733:    if (!OptAutocryptGpgme)
ncrypt/crypt_gpgme.c:3658:  OptPgpCheckTrust = false;
ncrypt/gpgme_functions.c:734:  if (OptPgpCheckTrust)
ncrypt/gpgme_functions.c:743:  if (OptPgpCheckTrust && (!crypt_id_is_valid(cur_key) || !crypt_id_is_strong(cur_key)))
ncrypt/pgp.c:141:    envlist_set(&EnvList, "GPG_TTY", tty, false);
ncrypt/pgp.c:1015:  OptDontHandlePgpKeys = true;
ncrypt/pgp.c:1017:  OptDontHandlePgpKeys = false;
ncrypt/pgp.c:2019:        OptPgpCheckTrust = false;
ncrypt/pgpinvoke.c:225:                          fd_pgp_out, fd_pgp_err, EnvList);
ncrypt/pgpkey.c:247:  OptPgpCheckTrust = false;
ncrypt/pgp_functions.c:66:  if (OptPgpCheckTrust)
ncrypt/pgp_functions.c:75:  if (OptPgpCheckTrust && (!pgp_id_is_valid(cur_key) || !pgp_id_is_strong(cur_key)))
ncrypt/smime.c:435:                          fp_smime_infd, fp_smime_outfd, fp_smime_errfd, EnvList);
pager/message.c:176:  envlist_set(&EnvList, "COLUMNS", columns, true);
pager/message.c:230:                                 fileno(fp_filter_out), -1, EnvList);
pager/message.c:287:  envlist_unset(&EnvList, "COLUMNS");
pager/message.c:332:  if (!OptNoCurses)
parse/extract.c:197:      pid = filter_create(buf_string(cmd), NULL, &fp, NULL, EnvList);
parse/set.c:66:      mutt_path_tilde(value, HomeDir);
pattern/compile.c:192:  pid_t pid = filter_create(cmd_buf->data, NULL, &fp, NULL, EnvList);
postpone/postpone.c:146:    int optnews = OptNews;
postpone/postpone.c:152:      OptNews = false;
postpone/postpone.c:166:      OptNews = true;
progress/progress.c:141:  if (OptNoCurses)
send/header.c:607:    if (!OptNewsSend)
send/header.c:617:    if (!OptNewsSend)
send/header.c:634:    if (!OptNewsSend)
send/header.c:640:  else if ((mode == MUTT_WRITE_HEADER_EDITHDRS) && OptNewsSend)
send/header.c:645:  else if ((mode == MUTT_WRITE_HEADER_EDITHDRS) && OptNewsSend)
send/header.c:651:  else if ((mode == MUTT_WRITE_HEADER_EDITHDRS) && OptNewsSend && c_x_comment_to)
send/header.c:689:    if (!OptNewsSend)
send/header.c:740:    fprintf(fp, "User-Agent: NeoMutt/%s%s\n", PACKAGE_VERSION, GitVer);
send/send.c:105:  mutt_path_canon(def_sig, HomeDir, false);
send/send.c:228:  if (OptNewsSend)
send/send.c:321:    STAILQ_FOREACH(uh, &UserHeader, entries)
send/send.c:367:  STAILQ_FOREACH(uh, &UserHeader, entries)
send/send.c:392:  STAILQ_FOREACH(uh, &UserHeader, entries)
send/send.c:1093:  if (OptNewsSend && c_x_comment_to && !TAILQ_EMPTY(&env_cur->from))
send/send.c:1330:  if (OptNewsSend)
send/send.c:1459:  const char *mailbox = Username;
send/send.c:1463:    snprintf(domain, sizeof(domain), "%s@%s", NONULL(Username),
send/send.c:1527:  if (OptNewsSend)
send/send.c:2127:    OptNewsSend = true;
send/send.c:2129:    OptNewsSend = false;
send/send.c:2185:        OptNewsSend = true;
send/send.c:2190:        OptNewsSend = false;
send/send.c:2827:  if (!OptNoCurses)
send/send.c:2882:  if (!OptNoCurses)
send/sendlib.c:105:        snprintf(buf, sizeof(buf), "%s/.mime.types", NONULL(HomeDir));
send/sendlib.c:576:  pid = filter_create(buf_string(cmd), NULL, &fp, &fp_err, EnvList);
send/sendlib.c:953:  OptNewsSend = false;
send/sendmail.c:168:      environ = EnvList;
send/sendmail.c:305:  if (OptNewsSend)
send/sendmail.c:357:  if (!OptNewsSend)
send/sendmail.c:418:  i = send_msg(path, &args, msg, OptNoCurses ? NULL : &childout, c_sendmail_wait);
send/sendmail.c:424:  if (!OptNoCurses)
send/smtp.c:531:  if (!OptNoCurses)
send/smtp.c:645:  if (!OptNoCurses)
send/smtp.c:858:  /* Read the 334 VXNlcm5hbWU6 challenge ("Username:" base64-encoded) */
send/smtp.c:1117:    adata.fqdn = NONULL(ShortHostname);
