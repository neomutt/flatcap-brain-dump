From 8d9d9df39097de39d7220b36f7c0f549cfdcd5ab Mon Sep 17 00:00:00 2001
From: Kevin McCarthy <kevin@8t8.us>
Date: Thu, 30 Jan 2020 15:06:36 -0800
Subject: [PATCH 02/11] 11 Add send_ctx to compose menu and get_postponed()

This will be used to store and use sctx for sign_as values.

Upstream-commit: https://gitlab.com/muttmua/mutt/commit/3b3186c2ce58a5bf56af60ce3f122f2955274eac
Co-authored-by: Richard Russon <rich@flatcap.org>
---
 compose/compose.c  | 23 +++++++++++++----------
 compose/lib.h  |  6 ++----
 postpone.c | 45 ++++++++++++++++++++++-----------------------
 protos.h   |  3 ++-
 send/send.c     | 17 +++++++----------
 send/lib.h     |  1 +
 6 files changed, 47 insertions(+), 48 deletions(-)

diff --git a/compose/compose.c b/compose/compose.c
index 6c694a2f6..df87df4e2 100644
--- a/compose/compose.c
+++ b/compose/compose.c
@@ -68,6 +68,7 @@
 #include "protos.h"
 #include "recvattach.h"
 #include "rfc3676.h"
+#include "send/lib.h"
 #include "sendlib.h"
 #include "sort.h"
 #include "ncrypt/lib.h"
@@ -1310,7 +1311,7 @@ static int mutt_dlg_compose_observer(struct NotifyCallback *nc)
  * @retval  0 Normal exit
  * @retval -1 Abort message
  */
-int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur, int flags)
+int mutt_compose_menu(struct SendContext *sctx)
 {
   char helpstr[1024]; // This isn't copied by the help bar
   char buf[PATH_MAX];
@@ -1323,6 +1324,8 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
   STAILQ_INIT(&redraw.cc_list);
   STAILQ_INIT(&redraw.bcc_list);
 
+  struct Email *e = sctx->e_templ;
+
   struct ComposeRedrawData *rd = &redraw;
 #ifdef USE_NNTP
   bool news = OptNewsSend; /* is it a news article ? */
@@ -1360,7 +1363,7 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
   notify_set_parent(ebar->notify, dlg->notify);
 
   rd->email = e;
-  rd->fcc = fcc;
+  rd->fcc = &sctx->fcc;
   rd->win_envelope = envelope;
   rd->win_cbar = ebar;
   rd->win_attach = attach;
@@ -1542,11 +1545,11 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
         break;
 
       case OP_COMPOSE_EDIT_FCC:
-        mutt_buffer_copy(&fname, fcc);
+        mutt_buffer_copy(&fname, &sctx->fcc);
         if (mutt_buffer_get_field(Prompts[HDR_FCC], &fname, MUTT_FILE | MUTT_CLEAR) == 0)
         {
-          mutt_buffer_copy(fcc, &fname);
-          mutt_buffer_pretty_mailbox(fcc);
+          mutt_buffer_copy(&sctx->fcc, &fname);
+          mutt_buffer_pretty_mailbox(&sctx->fcc);
           fcc_set = true;
           redraw_env = true;
         }
@@ -1574,7 +1577,7 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
           const char *tag = NULL;
           char *err = NULL;
           mutt_env_to_local(e->env);
-          mutt_edit_headers(NONULL(C_Editor), e->content->filename, e, fcc);
+          mutt_edit_headers(NONULL(C_Editor), e->content->filename, e, &sctx->fcc);
           if (mutt_env_to_intl(e->env, &tag, &err))
           {
             mutt_error(_("Bad IDN in '%s': '%s'"), tag, err);
@@ -1589,7 +1592,7 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
            * attachment list could change if the user invokes ~v to edit
            * the message with headers, in which we need to execute the
            * code below to regenerate the index array */
-          mutt_builtin_editor(e->content->filename, e, e_cur);
+          mutt_builtin_editor(e->content->filename, e, sctx->e_cur);
         }
 
         mutt_rfc3676_space_stuff(e);
@@ -2165,14 +2168,14 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
           break;
 #endif
 
-        if (!fcc_set && !mutt_buffer_is_empty(fcc))
+        if (!fcc_set && !mutt_buffer_is_empty(&sctx->fcc))
         {
           enum QuadOption ans =
               query_quadoption(C_Copy, _("Save a copy of this message?"));
           if (ans == MUTT_ABORT)
             break;
           else if (ans == MUTT_NO)
-            mutt_buffer_reset(fcc);
+            mutt_buffer_reset(&sctx->fcc);
         }
 
         loop = false;
@@ -2377,7 +2380,7 @@ int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur,
             if (actx->idx[i]->unowned)
               actx->idx[i]->content->unlink = false;
 
-          if (!(flags & MUTT_COMPOSE_NOFREEHEADER))
+          if (!(sctx->flags & SEND_NO_FREE_HEADER))
           {
             for (int i = 0; i < actx->idxlen; i++)
             {
diff --git a/compose/lib.h b/compose/lib.h
index a0c040d53..1c8ef2318 100644
--- a/compose/lib.h
+++ b/compose/lib.h
@@ -25,15 +25,13 @@
 
 struct Buffer;
 struct Email;
+struct SendContext;
 
 /* These Config Variables are only used in compose/compose.c */
 extern char *        C_ComposeFormat;
 extern char *        C_Ispell;
 extern unsigned char C_Postpone;
 
-/* flags for mutt_compose_menu() */
-#define MUTT_COMPOSE_NOFREEHEADER (1 << 0)
-
-int mutt_compose_menu(struct Email *e, struct Buffer *fcc, struct Email *e_cur, int flags);
+int mutt_compose_menu(struct SendContext *sctx);
 
 #endif /* MUTT_COMPOSE_H */
diff --git a/postpone.c b/postpone.c
index f66e91164..839cabafa 100644
--- a/postpone.c
+++ b/postpone.c
@@ -326,18 +326,15 @@ static struct Email *select_msg(struct Context *ctx)
  * @param[in]  hdr     envelope/attachment info for recalled message
  * @param[out] cur     if message was a reply, 'cur' is set to the message which 'hdr' is in reply to
  * @param[in]  fcc     fcc for the recalled message
- * @retval -1         Error/no messages
- * @retval 0          Normal exit
- * @retval #SEND_REPLY Recalled message is a reply
+ * @retval -1 Error/no messages
+ * @retval 0  Normal exit
  */
-int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
-                       struct Email **cur, struct Buffer *fcc)
+int mutt_get_postponed(struct Context *ctx, struct SendContext *sctx)
 {
   if (!C_Postponed)
     return -1;
 
   struct Email *e = NULL;
-  int rc = SEND_POSTPONED;
   const char *p = NULL;
   struct Context *ctx_post = NULL;
 
@@ -392,7 +389,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
     return -1;
   }
 
-  if (mutt_prepare_template(NULL, ctx_post->mailbox, hdr, e, false) < 0)
+  if (mutt_prepare_template(NULL, ctx_post->mailbox, sctx->e_templ, e, false) < 0)
   {
     if (ctx_post != ctx)
     {
@@ -419,7 +416,7 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
   C_Delete = opt_delete;
 
   struct ListNode *np = NULL, *tmp = NULL;
-  STAILQ_FOREACH_SAFE(np, &hdr->env->userhdrs, entries, tmp)
+  STAILQ_FOREACH_SAFE(np, &sctx->e_templ->env->userhdrs, entries, tmp)
   {
     size_t plen = mutt_str_startswith(np->data, "X-Mutt-References:", CASE_IGNORE);
     if (plen)
@@ -429,22 +426,22 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
       p = mutt_str_skip_email_wsp(np->data + plen);
       if (!ctx->mailbox->id_hash)
         ctx->mailbox->id_hash = mutt_make_id_hash(ctx->mailbox);
-      *cur = mutt_hash_find(ctx->mailbox->id_hash, p);
+      sctx->e_cur = mutt_hash_find(ctx->mailbox->id_hash, p);
 
-      if (*cur)
-        rc |= SEND_REPLY;
+      if (sctx->e_cur)
+        sctx->flags |= SEND_REPLY;
     }
     else if ((plen = mutt_str_startswith(np->data, "X-Mutt-Fcc:", CASE_IGNORE)))
     {
       p = mutt_str_skip_email_wsp(np->data + plen);
-      mutt_buffer_strcpy(fcc, p);
-      mutt_buffer_pretty_mailbox(fcc);
+      mutt_buffer_strcpy(&sctx->fcc, p);
+      mutt_buffer_pretty_mailbox(&sctx->fcc);
 
       /* note that x-mutt-fcc was present.  we do this because we want to add a
        * default fcc if the header was missing, but preserve the request of the
        * user to not make a copy if the header field is present, but empty.
        * see http://dev.mutt.org/trac/ticket/3653 */
-      rc |= SEND_POSTPONED_FCC;
+      sctx->flags |= SEND_POSTPONED_FCC;
     }
     else if (((WithCrypto & APPLICATION_PGP) != 0) &&
              /* this is generated by old neomutt versions */
@@ -452,24 +449,26 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
               /* this is the new way */
               mutt_str_startswith(np->data, "X-Mutt-PGP:", CASE_MATCH)))
     {
-      hdr->security = mutt_parse_crypt_hdr(strchr(np->data, ':') + 1, true, APPLICATION_PGP);
-      hdr->security |= APPLICATION_PGP;
+      sctx->e_templ->security =
+          mutt_parse_crypt_hdr(strchr(np->data, ':') + 1, true, APPLICATION_PGP);
+      sctx->e_templ->security |= APPLICATION_PGP;
     }
     else if (((WithCrypto & APPLICATION_SMIME) != 0) &&
              mutt_str_startswith(np->data, "X-Mutt-SMIME:", CASE_MATCH))
     {
-      hdr->security = mutt_parse_crypt_hdr(strchr(np->data, ':') + 1, true, APPLICATION_SMIME);
-      hdr->security |= APPLICATION_SMIME;
+      sctx->e_templ->security =
+          mutt_parse_crypt_hdr(strchr(np->data, ':') + 1, true, APPLICATION_SMIME);
+      sctx->e_templ->security |= APPLICATION_SMIME;
     }
 #ifdef MIXMASTER
     else if (mutt_str_startswith(np->data, "X-Mutt-Mix:", CASE_MATCH))
     {
-      mutt_list_free(&hdr->chain);
+      mutt_list_free(&sctx->e_templ->chain);
 
       char *t = strtok(np->data + 11, " \t\n");
       while (t)
       {
-        mutt_list_insert_tail(&hdr->chain, mutt_str_strdup(t));
+        mutt_list_insert_tail(&sctx->e_templ->chain, mutt_str_strdup(t));
         t = strtok(NULL, " \t\n");
       }
     }
@@ -481,15 +480,15 @@ int mutt_get_postponed(struct Context *ctx, struct Email *hdr,
     }
 
     // remove the header
-    STAILQ_REMOVE(&hdr->env->userhdrs, np, ListNode, entries);
+    STAILQ_REMOVE(&sctx->e_templ->env->userhdrs, np, ListNode, entries);
     FREE(&np->data);
     FREE(&np);
   }
 
   if (C_CryptOpportunisticEncrypt)
-    crypt_opportunistic_encrypt(hdr);
+    crypt_opportunistic_encrypt(sctx->e_templ);
 
-  return rc;
+  return 0;
 }
 
 /**
diff --git a/protos.h b/protos.h
index 702e44d98..085750f42 100644
--- a/protos.h
+++ b/protos.h
@@ -38,6 +38,7 @@ struct Email;
 struct EmailList;
 struct EnterState;
 struct Mailbox;
+struct SendContext;
 
 /**
  * enum XdgType - XDG variable types
@@ -75,7 +76,7 @@ int mutt_prepare_template(FILE *fp, struct Mailbox *m, struct Email *e_new, stru
 int mutt_enter_string(char *buf, size_t buflen, int col, CompletionFlags flags);
 int mutt_enter_string_full(char *buf, size_t buflen, int col, CompletionFlags flags, bool multiple,
                            char ***files, int *numfiles, struct EnterState *state);
-int mutt_get_postponed(struct Context *ctx, struct Email *hdr, struct Email **cur, struct Buffer *fcc);
+int mutt_get_postponed(struct Context *ctx, struct SendContext *sctx);
 SecurityFlags mutt_parse_crypt_hdr(const char *p, bool set_empty_signas, SecurityFlags crypt_app);
 int mutt_num_postponed(struct Mailbox *m, bool force);
 int mutt_thread_set_flag(struct Email *e, int flag, bool bf, bool subthread);
diff --git a/send/send.c b/send/send.c
index d5a496031..6e23bb1f1 100644
--- a/send/send.c
+++ b/send/send.c
@@ -1858,7 +1858,6 @@ static int send_message_setup(struct SendContext *sctx, const char *tempfile,
   FILE *fp_tmp = NULL;
   struct Body *pbody = NULL;
   char *ctype = NULL;
-  char buf[1024];
 
 #ifdef USE_NNTP
   if (sctx->flags & SEND_NEWS)
@@ -1899,10 +1898,8 @@ static int send_message_setup(struct SendContext *sctx, const char *tempfile,
 
     if (sctx->flags == SEND_POSTPONED)
     {
-      int tmpflags = mutt_get_postponed(ctx, sctx->e_templ, &sctx->e_cur, &sctx->fcc);
-      if (tmpflags < 0)
+      if (mutt_get_postponed(ctx, sctx) < 0)
         goto cleanup;
-      sctx->flags |= tmpflags;
 #ifdef USE_NNTP
       /* If postponed message is a news article, it have
        * a "Newsgroups:" header line, then set appropriate flag.  */
@@ -1969,9 +1966,11 @@ static int send_message_setup(struct SendContext *sctx, const char *tempfile,
       }
       else
       {
-        mutt_mktemp(buf, sizeof(buf));
-        fp_tmp = mutt_file_fopen(buf, "w+");
-        sctx->e_templ->content->filename = mutt_str_strdup(buf);
+        struct Buffer *buf = mutt_buffer_pool_get();
+        mutt_buffer_mktemp(buf);
+        fp_tmp = mutt_file_fopen(mutt_b2s(buf), "w+");
+        sctx->e_templ->content->filename = mutt_str_strdup(mutt_b2s(buf));
+        mutt_buffer_pool_release(&buf);
       }
     }
     else
@@ -2410,9 +2409,7 @@ static int send_message_resume_compose_menu(struct SendContext *sctx)
   main_loop:
 
     mutt_buffer_pretty_mailbox(&sctx->fcc);
-    i = mutt_compose_menu(
-        sctx->e_templ, &sctx->fcc, sctx->e_cur,
-        ((sctx->flags & SEND_NO_FREE_HEADER) ? MUTT_COMPOSE_NOFREEHEADER : 0));
+    i = mutt_compose_menu(sctx);
     if (i == -1)
     {
 /* abort */
diff --git a/send/lib.h b/send/lib.h
index 5b7b71b6c..928d670ad 100644
--- a/send/lib.h
+++ b/send/lib.h
@@ -140,5 +140,6 @@ void            mutt_make_post_indent(struct Mailbox *m, struct Email *e, FILE *
 struct Address *mutt_remove_xrefs(struct Address *a, struct Address *b);
 int             mutt_resend_message(FILE *fp, struct Context *ctx, struct Email *e_cur);
 void            mutt_set_followup_to(struct Envelope *e);
+int             mutt_send_message_resume(struct SendContext *sctx);
 
 #endif /* MUTT_SEND_H */
