From 573e2f641e6a91d920b6b83e1921c51edcad56fe Mon Sep 17 00:00:00 2001
From: Kevin McCarthy <kevin@8t8.us>
Date: Thu, 30 Jan 2020 15:19:49 -0800
Subject: [PATCH 03/11] 12 Pass sctx to mutt_builtin_editor() and
 mutt_edit_headers()

This will be used to set the sctx signas instead of globals for header
editing.

Upstream-commit: https://gitlab.com/muttmua/mutt/commit/c33d2e8b03e36e7e2bb6d29e851de94882758f7a
Co-authored-by: Richard Russon <rich@flatcap.org>
---
 compose/compose.c     |  4 ++--
 mutt_header.c | 23 +++++++++++++----------
 mutt_header.h |  3 ++-
 send/send.c        |  8 +++-----
 6 files changed, 41 insertions(+), 33 deletions(-)

diff --git a/compose/compose.c b/compose/compose.c
index df87df4e2..c06e7b8e1 100644
--- a/compose/compose.c
+++ b/compose/compose.c
@@ -1577,7 +1577,7 @@ int mutt_compose_menu(struct SendContext *sctx)
           const char *tag = NULL;
           char *err = NULL;
           mutt_env_to_local(e->env);
-          mutt_edit_headers(NONULL(C_Editor), e->content->filename, e, &sctx->fcc);
+          mutt_edit_headers(NONULL(C_Editor), sctx);
           if (mutt_env_to_intl(e->env, &tag, &err))
           {
             mutt_error(_("Bad IDN in '%s': '%s'"), tag, err);
@@ -1592,7 +1592,7 @@ int mutt_compose_menu(struct SendContext *sctx)
            * attachment list could change if the user invokes ~v to edit
            * the message with headers, in which we need to execute the
            * code below to regenerate the index array */
-          mutt_builtin_editor(e->content->filename, e, sctx->e_cur);
+          mutt_builtin_editor(sctx);
         }
 
         mutt_rfc3676_space_stuff(e);
diff --git a/mutt_header.c b/mutt_header.c
index c6e75f8c5..a28c31dea 100644
--- a/mutt_header.c
+++ b/mutt_header.c
@@ -44,6 +44,7 @@
 #include "muttlib.h"
 #include "options.h"
 #include "protos.h"
+#include "send/lib.h"
 #include "sendlib.h"
 #include "ncrypt/lib.h"
 
@@ -165,8 +166,7 @@ int mutt_label_message(struct Mailbox *m, struct EmailList *el)
  * @param e      Email
  * @param fcc    Buffer for the fcc field
  */
-void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
-                       struct Buffer *fcc)
+void mutt_edit_headers(const char *editor, struct SendContext *sctx)
 {
   char buf[1024];
   const char *p = NULL;
@@ -175,6 +175,9 @@ void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
   time_t mtime;
   struct stat st;
 
+  struct Email *e = sctx->e_templ;
+  const char *filename = e->content->filename;
+
   struct Buffer *path = mutt_buffer_pool_get();
   mutt_buffer_mktemp(path);
   FILE *fp_out = mutt_file_fopen(mutt_b2s(path), "w");
@@ -189,10 +192,10 @@ void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
   fputc('\n', fp_out); /* tie off the header. */
 
   /* now copy the body of the message. */
-  FILE *fp_in = fopen(body, "r");
+  FILE *fp_in = fopen(filename, "r");
   if (!fp_in)
   {
-    mutt_perror(body);
+    mutt_perror(filename);
     mutt_file_fclose(&fp_out);
     goto cleanup;
   }
@@ -220,7 +223,7 @@ void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
     goto cleanup;
   }
 
-  mutt_file_unlink(body);
+  mutt_file_unlink(filename);
   mutt_list_free(&e->env->userhdrs);
 
   /* Read the temp file back in */
@@ -231,12 +234,12 @@ void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
     goto cleanup;
   }
 
-  fp_out = mutt_file_fopen(body, "w");
+  fp_out = mutt_file_fopen(filename, "w");
   if (!fp_out)
   {
     /* intentionally leak a possible temporary file here */
     mutt_file_fclose(&fp_in);
-    mutt_perror(body);
+    mutt_perror(filename);
     goto cleanup;
   }
 
@@ -283,13 +286,13 @@ void mutt_edit_headers(const char *editor, const char *body, struct Email *e,
     bool keep = true;
     size_t plen;
 
-    if (fcc && (plen = mutt_str_startswith(np->data, "fcc:", CASE_IGNORE)))
+    if ((plen = mutt_str_startswith(np->data, "fcc:", CASE_IGNORE)))
     {
       p = mutt_str_skip_email_wsp(np->data + plen);
       if (*p)
       {
-        mutt_buffer_strcpy(fcc, p);
-        mutt_buffer_pretty_mailbox(fcc);
+        mutt_buffer_strcpy(&sctx->fcc, p);
+        mutt_buffer_pretty_mailbox(&sctx->fcc);
       }
       keep = false;
     }
diff --git a/mutt_header.h b/mutt_header.h
index 4f116b49f..7d7800fcc 100644
--- a/mutt_header.h
+++ b/mutt_header.h
@@ -27,8 +27,9 @@ struct Buffer;
 struct Email;
 struct EmailList;
 struct Mailbox;
+struct SendContext;
 
-void mutt_edit_headers(const char *editor, const char *body, struct Email *e, struct Buffer *fcc);
+void mutt_edit_headers(const char *editor, struct SendContext *sctx);
 void mutt_label_hash_add(struct Mailbox *m, struct Email *e);
 void mutt_label_hash_remove(struct Mailbox *m, struct Email *e);
 int mutt_label_message(struct Mailbox *m, struct EmailList *el);
diff --git a/send/send.c b/send/send.c
index 6e23bb1f1..ea2ce690a 100644
--- a/send/send.c
+++ b/send/send.c
@@ -2175,8 +2175,7 @@ static int send_message_resume_first_edit(struct SendContext *sctx)
 
   if (sctx->flags & SEND_MAILX)
   {
-    if (mutt_builtin_editor(sctx->e_templ->content->filename, sctx->e_templ,
-                            sctx->e_cur) == -1)
+    if (mutt_builtin_editor(sctx) == -1)
       goto cleanup;
   }
   else if (!(sctx->flags & SEND_BATCH))
@@ -2205,12 +2204,11 @@ static int send_message_resume_first_edit(struct SendContext *sctx)
           goto cleanup;
       }
       else if (!C_Editor || (mutt_str_strcmp("builtin", C_Editor) == 0))
-        mutt_builtin_editor(sctx->e_templ->content->filename, sctx->e_templ, sctx->e_cur);
+        mutt_builtin_editor(sctx);
       else if (C_EditHeaders)
       {
         mutt_env_to_local(sctx->e_templ->env);
-        mutt_edit_headers(C_Editor, sctx->e_templ->content->filename,
-                          sctx->e_templ, &sctx->fcc);
+        mutt_edit_headers(C_Editor, sctx);
         mutt_env_to_intl(sctx->e_templ->env, NULL, NULL);
       }
       else
