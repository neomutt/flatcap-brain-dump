From ab790a7d0ba20a832699aeb802bd8cc831c71f4f Mon Sep 17 00:00:00 2001
From: Kevin McCarthy <kevin@8t8.us>
Date: Thu, 19 Mar 2020 15:12:49 -0700
Subject: [PATCH] Add $fcc_delimiter, to allow multiple Fcc mailboxes.

The variable defaults unset, to prevent breaking anyone's
configuration.

If set to a value, such as ",", $record and fcc-hook may list multiple
mailboxes separated by the delimiter.  Mutt will tokenize and
expand/prettify each separate mailbox.  At Fcc time, it will loop
through trying to save to each mailbox.

This patch introduces a bit more uglyness into init.c, which has to
special-process for $record in a few places.  I don't like that, but I
believe the feature is important enough to allow for the one-off
behavior hack, because we are constrained by backwards compatibility.

Add documentation notes about the resulting issues with '<' mailbox
shortcut expansion, and with fcc-save-hook processing.  It is
recommended to use fcc-hook to set multiple mailboxes in those cases
instead.
---
 compose.c           |   2 +-
 doc/manual.xml.head |  33 ++++++++-
 globals.h           |   1 +
 headers.c           |   2 +-
 hook.c              |   8 ++-
 init.c              |  34 ++++++---
 init.h              |  12 ++++
 muttlib.c           |  58 +++++++++++++++
 postpone.c          |   2 +-
 protos.h            |   2 +
 send.c              | 169 ++++++++++++++++++++++++++++----------------
 11 files changed, 249 insertions(+), 74 deletions(-)

diff --git a/compose.c b/compose.c
index 5358fb4f..2b608de7 100644
--- a/compose.c
+++ b/compose.c
@@ -1129,7 +1129,7 @@ int mutt_compose_menu (SEND_CONTEXT *sctx)
 	if (mutt_buffer_get_field (_("Fcc: "), fname, MUTT_FILE | MUTT_CLEAR) == 0)
 	{
 	  mutt_buffer_strcpy (sctx->fcc, mutt_b2s (fname));
-	  mutt_buffer_pretty_mailbox (sctx->fcc);
+	  mutt_buffer_pretty_multi_mailbox (sctx->fcc, FccDelimiter);
 	  mutt_window_move (MuttIndexWindow, HDR_FCC, HDR_XOFFSET);
 	  mutt_paddstr (W, mutt_b2s (sctx->fcc));
 	  fccSet = 1;
diff --git a/doc/manual.xml.head b/doc/manual.xml.head
index 56073c1f..e5f452e6 100644
--- a/doc/manual.xml.head
+++ b/doc/manual.xml.head
@@ -3915,6 +3915,16 @@ of <emphasis>pattern</emphasis>.
 linkend="fcc-save-hook"><command>fcc-save-hook</command></link> command.
 </para>
 
+<para>
+Multiple mailboxes may be specified by separating them with <link
+linkend="fcc-delimiter">$fcc_delimiter</link>, if set:
+</para>
+
+<screen>
+  set fcc_delimiter = ','
+  fcc-hook 'foo@example\.com$' '+one,+two'
+</screen>
+
 </sect1>
 
 <sect1 id="fcc-save-hook">
@@ -3933,13 +3943,19 @@ linkend="fcc-save-hook"><command>fcc-save-hook</command></link> command.
 </cmdsynopsis>
 
 <para>
-This command is a shortcut, equivalent to doing both a <link
+This command is a shortcut, almost equivalent to doing both a <link
 linkend="fcc-hook"><command>fcc-hook</command></link> and a <link
 linkend="save-hook"><command>save-hook</command></link> with its
 arguments, including %-expansion on <emphasis>mailbox</emphasis>
 according to <link linkend="index-format">$index_format</link>.
 </para>
 
+<para>
+Note, however that the fcc-save-hook is not designed to take advantage
+of multiple mailboxes, as fcc-hook is.  For correct behavior, you should
+use separate fcc and save hooks in that case.
+</para>
+
 </sect1>
 
 <sect1 id="send-hook">
@@ -6565,7 +6581,20 @@ to set <link linkend="record">$record</link>:
 </para>
 
 <screen>
-folder-hook . 'set record=^'</screen>
+  folder-hook . 'set record=^'
+</screen>
+
+<para>
+Note: the <link linkend="record">$record</link> shortcut
+<quote><literal>&lt;</literal></quote> is substituted without any
+regard to multiple mailboxes and <link
+linkend="fcc-delimiter">$fcc_delimiter</link>.  If you use multiple
+Fcc mailboxes, and also want to use the
+<quote><literal>&lt;</literal></quote> mailbox shortcut, it might be
+better to set <link linkend="record">$record</link> to the primary
+mailbox and use a <link linkend="fcc-hook">fcc-hook</link> to set all
+mailboxes during message composition.
+</para>
 
 </sect1>
 
diff --git a/globals.h b/globals.h
index 5beee5d5..8218e2d8 100644
--- a/globals.h
+++ b/globals.h
@@ -58,6 +58,7 @@ WHERE char *DsnNotify;
 WHERE char *DsnReturn;
 WHERE char *Editor;
 WHERE char *EscChar;
+WHERE char *FccDelimiter;
 WHERE char *FolderFormat;
 WHERE char *ForwardAttrIntro;
 WHERE char *ForwardAttrTrailer;
diff --git a/headers.c b/headers.c
index a8725c0f..e1af1d9e 100644
--- a/headers.c
+++ b/headers.c
@@ -168,7 +168,7 @@ int mutt_edit_headers (const char *editor,
         if (*p)
         {
           mutt_buffer_strcpy (sctx->fcc, p);
-          mutt_buffer_pretty_mailbox (sctx->fcc);
+          mutt_buffer_pretty_multi_mailbox (sctx->fcc, FccDelimiter);
         }
         keep = 0;
       }
diff --git a/hook.c b/hook.c
index 0faa00c8..3fd68781 100644
--- a/hook.c
+++ b/hook.c
@@ -138,10 +138,14 @@ int mutt_parse_hook (BUFFER *buf, BUFFER *s, union pointer_long_t udata, BUFFER
     mutt_check_simple (pattern, DefaultHook);
   }
 
-  if (data & (MUTT_MBOXHOOK | MUTT_SAVEHOOK | MUTT_FCCHOOK))
+  if (data & (MUTT_MBOXHOOK | MUTT_SAVEHOOK))
   {
     mutt_buffer_expand_path (command);
   }
+  else if (data & MUTT_FCCHOOK)
+  {
+    mutt_buffer_expand_multi_path (command, FccDelimiter);
+  }
 
   /* check to make sure that a matching hook doesn't already exist */
   for (ptr = Hooks; ptr; ptr = ptr->next)
@@ -606,7 +610,7 @@ void mutt_select_fcc (BUFFER *path, HEADER *hdr)
   else
     mutt_buffer_fix_dptr (path);
 
-  mutt_buffer_pretty_mailbox (path);
+  mutt_buffer_pretty_multi_mailbox (path, FccDelimiter);
 }
 
 static char *_mutt_string_hook (const char *match, int hook)
diff --git a/init.c b/init.c
index f814d962..23f034d7 100644
--- a/init.c
+++ b/init.c
@@ -2266,6 +2266,7 @@ static int parse_set (BUFFER *tmp, BUFFER *s, union pointer_long_t udata, BUFFER
       {
 	char _tmp[LONG_STRING];
 	const char *val = NULL;
+        BUFFER *path_buf = NULL;
 
         if (myvar)
         {
@@ -2288,10 +2289,13 @@ static int parse_set (BUFFER *tmp, BUFFER *s, union pointer_long_t udata, BUFFER
 	}
 	else if (DTYPE (MuttVars[idx].type) == DT_PATH)
 	{
-	  _tmp[0] = '\0';
-	  strfcpy (_tmp, NONULL(*((char **) MuttVars[idx].data.p)), sizeof (_tmp));
-	  mutt_pretty_mailbox (_tmp, sizeof (_tmp));
-	  val = _tmp;
+          path_buf = mutt_buffer_pool_get ();
+          mutt_buffer_strcpy (path_buf, NONULL(*((char **) MuttVars[idx].data.p)));
+          if (mutt_strcmp (MuttVars[idx].option, "record") == 0)
+            mutt_buffer_pretty_multi_mailbox (path_buf, FccDelimiter);
+          else
+            mutt_buffer_pretty_mailbox (path_buf);
+	  val = mutt_b2s (path_buf);
 	}
 	else if (DTYPE (MuttVars[idx].type) == DT_MBCHARTBL)
         {
@@ -2303,6 +2307,8 @@ static int parse_set (BUFFER *tmp, BUFFER *s, union pointer_long_t udata, BUFFER
 
 	/* user requested the value of this variable */
 	pretty_var (err->data, err->dsize, MuttVars[idx].option, NONULL(val));
+
+        mutt_buffer_pool_release (&path_buf);
 	break;
       }
       else
@@ -2333,7 +2339,10 @@ static int parse_set (BUFFER *tmp, BUFFER *s, union pointer_long_t udata, BUFFER
 
           scratch = mutt_buffer_pool_get ();
 	  mutt_buffer_strcpy (scratch, tmp->data);
-	  mutt_buffer_expand_path (scratch);
+          if (mutt_strcmp (MuttVars[idx].option, "record") == 0)
+            mutt_buffer_expand_multi_path (scratch, FccDelimiter);
+          else
+            mutt_buffer_expand_path (scratch);
 	  *((char **) MuttVars[idx].data.p) = safe_strdup (mutt_b2s (scratch));
           mutt_buffer_pool_release (&scratch);
         }
@@ -3133,17 +3142,26 @@ int mutt_var_value_complete (char *buffer, size_t len, int pos)
 static int var_to_string (int idx, char* val, size_t len)
 {
   char tmp[LONG_STRING];
+  BUFFER *path_buf = NULL;
   static const char * const vals[] = { "no", "yes", "ask-no", "ask-yes" };
 
   tmp[0] = '\0';
 
   if ((DTYPE(MuttVars[idx].type) == DT_STR) ||
-      (DTYPE(MuttVars[idx].type) == DT_PATH) ||
       (DTYPE(MuttVars[idx].type) == DT_RX))
   {
     strfcpy (tmp, NONULL (*((char **) MuttVars[idx].data.p)), sizeof (tmp));
-    if (DTYPE (MuttVars[idx].type) == DT_PATH)
-      mutt_pretty_mailbox (tmp, sizeof (tmp));
+  }
+  else if (DTYPE (MuttVars[idx].type) == DT_PATH)
+  {
+    path_buf = mutt_buffer_pool_get ();
+    mutt_buffer_strcpy (path_buf, NONULL (*((char **) MuttVars[idx].data.p)));
+    if (mutt_strcmp (MuttVars[idx].option, "record") == 0)
+      mutt_buffer_pretty_multi_mailbox (path_buf, FccDelimiter);
+    else
+      mutt_buffer_pretty_mailbox (path_buf);
+    strfcpy (tmp, mutt_b2s (path_buf), sizeof (tmp));
+    mutt_buffer_pool_release (&path_buf);
   }
   else if (DTYPE (MuttVars[idx].type) == DT_MBCHARTBL)
   {
diff --git a/init.h b/init.h
index 13145b21..28773a42 100644
--- a/init.h
+++ b/init.h
@@ -1061,6 +1061,15 @@ struct option_t MuttVars[] = {
   ** signed.
   ** (PGP only)
   */
+  { "fcc_delimiter", DT_STR, R_NONE, {.p=&FccDelimiter}, {.p=0} },
+  /*
+  ** .pp
+  ** When specified, this allows the ability to Fcc to more than one
+  ** mailbox.  The fcc value will be split by this delimiter and Mutt
+  ** will evaluate each part as a mailbox separately.
+  ** .pp
+  ** See $$record, ``$fcc-hook'', and ``$fcc-save-hook''.
+  */
   { "flag_safe", DT_BOOL, R_NONE, {.l=OPTFLAGSAFE}, {.l=0} },
   /*
   ** .pp
@@ -2945,6 +2954,9 @@ struct option_t MuttVars[] = {
   ** The value of \fI$$record\fP is overridden by the $$force_name and
   ** $$save_name variables, and the ``$fcc-hook'' command.  Also see $$copy
   ** and $$write_bcc.
+  ** .pp
+  ** Multiple mailboxes may be specified if $$fcc_delimiter is
+  ** set to a string delimiter.
   */
   { "reflow_space_quotes",	DT_BOOL, R_NONE, {.l=OPTREFLOWSPACEQUOTES}, {.l=1} },
   /*
diff --git a/muttlib.c b/muttlib.c
index 8690bde5..653f3390 100644
--- a/muttlib.c
+++ b/muttlib.c
@@ -402,6 +402,59 @@ int mutt_matches_ignore (const char *s, LIST *t)
   return 0;
 }
 
+/* Splits src into parts delimited by delimiter.
+ * Invokes mapfunc on each part and joins the result back into src.
+ * Note this function currently does not preserve trailing delimiters.
+ */
+static void delimited_buffer_map_join (BUFFER *src, const char *delimiter,
+                                       void (*mapfunc)(BUFFER *))
+{
+  BUFFER *dest, *part;
+  const char *part_begin, *part_end;
+  size_t delim_size;
+
+  delim_size = mutt_strlen (delimiter);
+  if (!delim_size)
+  {
+    mapfunc (src);
+    return;
+  }
+
+  dest = mutt_buffer_pool_get ();
+  part = mutt_buffer_pool_get ();
+
+  part_begin = mutt_b2s (src);
+  while (part_begin && *part_begin)
+  {
+    part_end = strstr (part_begin, delimiter);
+    if (part_end)
+    {
+      mutt_buffer_substrcpy (part, part_begin, part_end);
+      part_end += delim_size;
+    }
+    else
+      mutt_buffer_strcpy (part, part_begin);
+
+    mapfunc (part);
+
+    if (part_begin != mutt_b2s (src))
+      mutt_buffer_addstr (dest, delimiter);
+    mutt_buffer_addstr (dest, mutt_b2s (part));
+
+    part_begin = part_end;
+  }
+
+  mutt_buffer_strcpy (src, mutt_b2s (dest));
+
+  mutt_buffer_pool_release (&dest);
+  mutt_buffer_pool_release (&part);
+}
+
+void mutt_buffer_expand_multi_path (BUFFER *src, const char *delimiter)
+{
+  delimited_buffer_map_join (src, delimiter, mutt_buffer_expand_path);
+}
+
 char *mutt_expand_path (char *s, size_t slen)
 {
   return _mutt_expand_path (s, slen, 0);
@@ -920,6 +973,11 @@ void mutt_free_alias (ALIAS **p)
   }
 }
 
+void mutt_buffer_pretty_multi_mailbox (BUFFER *s, const char *delimiter)
+{
+  delimited_buffer_map_join (s, delimiter, mutt_buffer_pretty_mailbox);
+}
+
 void mutt_buffer_pretty_mailbox (BUFFER *s)
 {
   /* This reduces the size of the BUFFER, so we can pass it through.
diff --git a/postpone.c b/postpone.c
index e0dfd4da..19cf61f2 100644
--- a/postpone.c
+++ b/postpone.c
@@ -349,7 +349,7 @@ int mutt_get_postponed (CONTEXT *ctx, SEND_CONTEXT *sctx)
     {
       p = skip_email_wsp(tmp->data + 11);
       mutt_buffer_strcpy (sctx->fcc, p);
-      mutt_buffer_pretty_mailbox (sctx->fcc);
+      mutt_buffer_pretty_multi_mailbox (sctx->fcc, FccDelimiter);
 
       /* remove the X-Mutt-Fcc: header field */
       next = tmp->next;
diff --git a/protos.h b/protos.h
index 5c05a490..ad90a01e 100644
--- a/protos.h
+++ b/protos.h
@@ -142,6 +142,7 @@ char *mutt_charset_hook (const char *);
 char *mutt_iconv_hook (const char *);
 void mutt_buffer_expand_path (BUFFER *);
 void _mutt_buffer_expand_path (BUFFER *, int);
+void mutt_buffer_expand_multi_path (BUFFER *src, const char *delimiter);
 char *mutt_expand_path (char *, size_t);
 char *_mutt_expand_path (char *, size_t, int);
 char *mutt_find_hook (int, const char *);
@@ -248,6 +249,7 @@ void mutt_perror (const char *);
 void mutt_prepare_envelope (ENVELOPE *, int);
 void mutt_unprepare_envelope (ENVELOPE *);
 void mutt_buffer_pretty_mailbox (BUFFER *);
+void mutt_buffer_pretty_multi_mailbox (BUFFER *s, const char *delimiter);
 void mutt_pretty_mailbox (char *, size_t);
 void mutt_pretty_size (char *, size_t, LOFF_T);
 void mutt_pipe_message (HEADER *);
diff --git a/send.c b/send.c
index eaadb90b..936cb50e 100644
--- a/send.c
+++ b/send.c
@@ -1210,24 +1210,22 @@ cleanup:
   return (i);
 }
 
-static int save_fcc (SEND_CONTEXT *sctx,
-                     BODY *clear_content, char *pgpkeylist,
-                     int flags)
+static void save_fcc_mailbox_part (BUFFER *fcc_mailbox, SEND_CONTEXT *sctx,
+                                   int flags)
 {
-  HEADER *msg;
-  BUFFER *fcc;
-  int rc = 0;
-  BODY *tmpbody;
-  BODY *save_content = NULL;
-  BODY *save_sig = NULL;
-  BODY *save_parts = NULL;
-  int choice, save_atts;
+  int rc, choice;
 
-  msg = sctx->msg;
-  fcc = sctx->fcc;
-  tmpbody = msg->content;
+  /* L10N:
+     Message when saving fcc after sending.
+     %s is the mailbox name.
+  */
+  mutt_message (_("Saving Fcc to %s"), mutt_b2s (fcc_mailbox));
 
-  mutt_buffer_expand_path (fcc);
+  mutt_buffer_expand_path (fcc_mailbox);
+
+  if (!(mutt_buffer_len (fcc_mailbox) &&
+        mutt_strcmp ("/dev/null", mutt_b2s (fcc_mailbox))))
+    return;
 
   /* Don't save a copy when we are in batch-mode, and the FCC
    * folder is on an IMAP server: This would involve possibly lots
@@ -1237,21 +1235,83 @@ static int save_fcc (SEND_CONTEXT *sctx,
    * from non-curses mode is available from Brendan Cully.  However,
    * I'd like to think a bit more about this before including it.
    */
-
 #ifdef USE_IMAP
   if ((flags & SENDBATCH) &&
-      mutt_buffer_len (fcc) &&
-      mx_is_imap (mutt_b2s (fcc)))
+      mx_is_imap (mutt_b2s (fcc_mailbox)))
   {
+    mutt_sleep (1);
     mutt_error _ ("Fcc to an IMAP mailbox is not supported in batch mode");
-    return rc;
+    return;
   }
 #endif
 
-  if (!(mutt_buffer_len (fcc) &&
-        mutt_strcmp ("/dev/null", mutt_b2s (fcc))))
+  rc = mutt_write_fcc (mutt_b2s (fcc_mailbox), sctx, NULL, 0, NULL);
+  while (rc && !(flags & SENDBATCH))
+  {
+    mutt_sleep (1);
+    mutt_clear_error ();
+    choice = mutt_multi_choice (
+      /* L10N:
+         Called when saving to $record or Fcc failed after sending.
+         (r)etry tries the same mailbox again.
+         alternate (m)ailbox prompts for a different mailbox to try.
+         (s)kip aborts saving.
+      */
+      _("Fcc failed. (r)etry, alternate (m)ailbox, or (s)kip? "),
+      /* L10N:
+         These correspond to the "Fcc failed" multi-choice prompt
+         (r)etry, alternate (m)ailbox, or (s)kip.
+         Any similarity to famous leaders of the FSF is coincidental.
+      */
+      _("rms"));
+    switch (choice)
+    {
+      case 2:   /* alternate (m)ailbox */
+        /* L10N:
+           This is the prompt to enter an "alternate (m)ailbox" when the
+           initial Fcc fails.
+        */
+        rc = mutt_buffer_enter_fname (_("Fcc mailbox"), fcc_mailbox, 1);
+        if ((rc == -1) || !mutt_buffer_len (fcc_mailbox))
+        {
+          rc = 0;
+          break;
+        }
+        /* fall through */
+
+      case 1:   /* (r)etry */
+        rc = mutt_write_fcc (mutt_b2s (fcc_mailbox), sctx, NULL, 0, NULL);
+        break;
+
+      case -1:  /* abort */
+      case 3:   /* (s)kip */
+        rc = 0;
+        break;
+    }
+  }
+
+  return;
+}
+
+static int save_fcc (SEND_CONTEXT *sctx,
+                     BODY *clear_content, char *pgpkeylist,
+                     int flags)
+{
+  HEADER *msg;
+  int rc = 0;
+  BODY *tmpbody;
+  BODY *save_content = NULL;
+  BODY *save_sig = NULL;
+  BODY *save_parts = NULL;
+  int save_atts;
+
+  if (!(mutt_buffer_len (sctx->fcc) &&
+        mutt_strcmp ("/dev/null", mutt_b2s (sctx->fcc))))
     return rc;
 
+  msg = sctx->msg;
+  tmpbody = msg->content;
+
   /* Before sending, we don't allow message manipulation because it
    * will break message signatures.  This is especially complicated by
    * Protected Headers. */
@@ -1320,53 +1380,44 @@ static int save_fcc (SEND_CONTEXT *sctx,
 full_fcc:
   if (msg->content)
   {
+    size_t delim_size;
+
     /* update received time so that when storing to a mbox-style folder
      * the From_ line contains the current time instead of when the
      * message was first postponed.
      */
     msg->received = time (NULL);
-    rc = mutt_write_fcc (mutt_b2s (fcc), sctx, NULL, 0, NULL);
-    while (rc && !(flags & SENDBATCH))
+
+    /* Split fcc into comma separated mailboxes */
+    delim_size = mutt_strlen (FccDelimiter);
+    if (!delim_size)
+      save_fcc_mailbox_part (sctx->fcc, sctx, flags);
+    else
     {
-      mutt_clear_error ();
-      choice = mutt_multi_choice (
-        /* L10N:
-           Called when saving to $record or Fcc failed after sending.
-           (r)etry tries the same mailbox again.
-           alternate (m)ailbox prompts for a different mailbox to try.
-           (s)kip aborts saving.
-        */
-        _("Fcc failed. (r)etry, alternate (m)ailbox, or (s)kip? "),
-        /* L10N:
-           These correspond to the "Fcc failed" multi-choice prompt
-           (r)etry, alternate (m)ailbox, or (s)kip.
-           Any similarity to famous leaders of the FSF is coincidental.
-        */
-        _("rms"));
-      switch (choice)
+      BUFFER *fcc_mailbox;
+      const char *mb_beg, *mb_end;
+
+      fcc_mailbox = mutt_buffer_pool_get ();
+
+      mb_beg = mutt_b2s (sctx->fcc);
+      while (mb_beg && *mb_beg)
       {
-        case 2:   /* alternate (m)ailbox */
-          /* L10N:
-             This is the prompt to enter an "alternate (m)ailbox" when the
-             initial Fcc fails.
-          */
-          rc = mutt_buffer_enter_fname (_("Fcc mailbox"), fcc, 1);
-          if ((rc == -1) || !mutt_buffer_len (fcc))
-          {
-            rc = 0;
-            break;
-          }
-          /* fall through */
+        mb_end = strstr (mb_beg, FccDelimiter);
+        if (mb_end)
+        {
+          mutt_buffer_substrcpy (fcc_mailbox, mb_beg, mb_end);
+          mb_end += delim_size;
+        }
+        else
+          mutt_buffer_strcpy (fcc_mailbox, mb_beg);
 
-        case 1:   /* (r)etry */
-          rc = mutt_write_fcc (mutt_b2s (fcc), sctx, NULL, 0, NULL);
-          break;
+        if (mutt_buffer_len (fcc_mailbox))
+          save_fcc_mailbox_part (fcc_mailbox, sctx, flags);
 
-        case -1:  /* abort */
-        case 3:   /* (s)kip */
-          rc = 0;
-          break;
+        mb_beg = mb_end;
       }
+
+      mutt_buffer_pool_release (&fcc_mailbox);
     }
   }
 
@@ -2304,7 +2355,7 @@ static int send_message_resume_compose_menu (SEND_CONTEXT *sctx)
   {
 main_loop:
 
-    mutt_buffer_pretty_mailbox (sctx->fcc);
+    mutt_buffer_pretty_multi_mailbox (sctx->fcc, FccDelimiter);
     i = mutt_compose_menu (sctx);
     if (i == -1)
     {
-- 
2.26.2

