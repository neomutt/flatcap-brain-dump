expando % given start code [end code]
what needs to be in base?
	padding? YES
	pipe| ? NO can't be (filter)
	`backticks`? NO can't be (filter)
what's left?
	quoting
	escaping
	delegating
	conditionals (nested)

parse loop
'\' first , ignore next char
not % -> literal
% -> start
	function to match precision
	function to match letter against array
two stage parse on config variable set
	populates as needed

parsing (simple)
	%a (single)
	%ab (double)
	%{...} (limited range)

parse returns
	key letter(s)
	key length
	callback
	precision
	NOT the text
	location of end of range
		assume keylen == 1?
what about (nested) conditionals?

Parse
	%?a?b&c?  or  %<a?b&c>
parse_cond() returns tree of info
	a -- b  (a marked conditional)
	  \- c
finds '?' or '<' -> conditional
parse_letter(NO_PRECISION) -> a,1
expect '?'
find first non-escaped '?' -> true clause
'?' find '&' -> false clause

*when* is condition tested?
	immediately -> parse_letter(cond) => true/false
	delayed -> store letter & children for later
true/false clauses passed recursively to expando

can we recurse before finding end?  (and hope it works)  have to

	%<a?%<p?q&r>&%<x?y&z>>

'%' start
'<' conditional
letter(cond) => a,1
'?' good
expando(cond) recurse
'%' start
'<' conditional
letter(conf) => p,1
'?' good
expando(cond) recurse
'q' '&' END
'&' good recurse
'r' '>' END
'&' good
[repeat for x,y,z]
'>' END

back to top level with literals
insert literals into example throughout
result is tree of FormatInfo
parent has root of tree + original string
FormatInfo's point into original string
	for literals: orig[off,len]

%{a:cond} or %{cond:a}  %{else}  %{cond-end} or %{end}
	plus nesting

"index_format" has default value, but no validator
we need letter array data for
	1) validating
	2) pre-processing into tree
unless we define new type ∀ formats (or subtype)
or default string is struct of info for parsing?

custom type ∀ formats is OK
	since they share most of the code
	just data array is diff

simplify mutt_config.c
	default value NULL
	set_initial on startup
	set default value to tree/array
	on shutdown free data

expando callback may fail, e.g. $conf vs $ENV
conf fails, no action
env fails (returns success) but empty

gahr:
	%{header:from}
	%{date:recipient}
	%{date:recipient-local}
	%{date:recipient-UTC}

note
	conditionals don't support width specification
	e.g.  %-14.3<...> to limit both parts

broken
	`%6 `
	works for folder_format_str()

%{desc:-10.3}  ==  description, left justified, max 3, min 10

%{name} -- minimum unique name from data {}
data = { aardvark, apple, applied }
	aa(rdvark)
	apple
	appli(ed)

arbitrary fields, e.g.  %{header:from}
need to define more domains
could be expensive for index_format
just use for hooks?

how do conditionals work?  (and nest)

%{test:flagged} ... %{test:end}
%{test:flagged} ... %{test:else} ... %{test:end}

'test' => reserved name
or s/test/cond/g

or simpler:

%{if:flagged} ... %{end}
%{if:flagged} ... %{else} ... %{end}

'if', 'else', 'end' => reserved names

can you format conditionals to restrict both if/else clauses?
	%{test:flagged:-10.3} ?

