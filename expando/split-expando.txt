Split up mutt_expando_format()

`mutt_expando_format()` is a powerful, flexible, function that transforms `printf(3)`-like strings.
It's used in config variables, hooks, color specifications and more.

The basic function
The problem with `mutt_expando_format()` is that it **does too much**.

47 alphabetic chars: AaBbCcDdEeFfgHhIiJKkLlMmNnOoPpQqRrSsTtuVvWXxYyZ
1 non-alphabetic:    !
5 multi-char:        Fp Gx zc zs zt
4 bracketed:         (fmt) [fmt] {fmt}
0 named:             {date} {author}

separate function for each letter?

how to validate format strings

what about multi-letter combos?
what about ${name} in the future?
lookup tables passed for callbacks
[] { key letter / string, fn }
need data for each array
	or possibly for each letter
pass params of (array, data)
	-> callback(opt letter, data)
does this mean sharing letters?  NO
	(unifying them across callers?)
sort array by longest match (named entities) first

pass array of { string, function, data }

Each caller can specify their own letters, but choose from standard callback
functions, or supply their own.

code: expando dir for common callbacks
	dependent on libmutt, libemail

mutt_expando.c contains callbacks for views, MailboxView, EmailView (if nec)

functions in base
	actually formatting
	precision
	if/then/else
		how?

functions in callback
	generate string from data
	no formatting
	no precision

pass flags to base
	ALLOW_CONDITIONAL

pass flags to callback
	callback-specific

conditional -> numeric (== 0) or (!= 0)
	but we're passed a string
base parse letter, precision, conditional, callback for string -> buf
if cond type, flag the callback function
	recurse with 'if' or 'else'
alloc buffer, allow cb to realloc if nec (big filename?)
how is colour handled if cb doesn't manage precision?
	[C-on]apple[C-off] -> [C-on]app[C-off] ?
	or just truncate at text and END colour
	need to truncate in text, not a magic (color, or tree, etc)
can't pass opt struct to callback
	need specific letter
	in case many letters have the same callback function

subject "tree" is an EV (view characteristic)
	"tagged" too
all fields and colours are limited to their column
	except indicator, selection, highlight
	index line regexes
	where are they added?
unless multi-coloured (e.g. tree+subject)
	don't end colour in callback?
	let base do it after truncation
put common callbacks in their associated source
	EV in email_view.c (or mutt_email.c)
	Ctx in context.c

base function, separate functions to
	identify start of expando
	parse conditional into
		expando
		if clause
		else clause
		next char
	parse/apply precision

format strings have a list of
	[ callback_fn, data ]
	use this to split up deps
	GUI could have [ X, ctx ]
	reducing deps of mutt_expando_format()

revamp format string expandos (2018-10-12)
	<darnir> But on a more serious note, how about printf style format strings, with modifiers?
	<flatcap> they already accept %4.4s type modifiers, so it's a bit tricky to fit anything else in
	<flatcap> the alternative is to steal back %{} and have %{name} -- it gets a bit verbose, but it's much clearer
	<darnir> I like that
	<darnir> It's a config file. I never mind things that are verbose in there
	<flatcap> it might be possible to transition without causing trouble...
	<flatcap> %{} is a date specifier, but if we check the contents for our magic words first
	<darnir> With the verbose %{} ones. Yeah, that should be doable.
	<darnir> I have a suggestion, but it depends on how willing you are to deprecate old syntax
	<darnir> %{option-name:optional fmt string}
	<darnir> And in a year or so, make the %{fmt} syntax disappear
	<flatcap> so %{desc:.40} description limited to 40 chars
	<flatcap> I like the self-contained-ness of it
	<darnir> I like that as well

how to (nested) conditionals work with %{named} format?

which expandos allow $config $ENV pipe| expansion?
	delegate these too

pipe| and `back` callbacks cat get/copy/modify the global environment

Docs:
	Any format string ending in a vertical bar (“|”) will be expanded and
	piped through the first word in the string, using spaces as separator.
	The string returned will be used for display. If the returned string
	ends in %, it will be passed through the formatter a second time. This
	allows the filter to generate a replacement format string including %
	expandos.

What expansion goes on before
	`pipe.sh|` Expand and run command
	``` `backticks` ``` Execute command
any differences?
does returning '%' at the end work for both?

