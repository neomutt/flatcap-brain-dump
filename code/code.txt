LOW IMPACT / LOW EFFORT / NOT CONTENTIOUS
-----------------------------------------

fix spelling/grammar
delete ^L in source
delete spurious \ in middle of lines
delete trailing whitespace
squash redundant vertical whitespace
kill tabs in strings
reindent manual.xml
drop vim modelines
check for 404 links
check for mutt-dev@ email addresses

declare all local functions "static"
	standard name for statics?
	drop mutt_ prefix

iwyu on all source files
#include with "" not <> for mutt headers
drop #if HAVE_CONFIG_H
any functions() -> (void)
use #ifdef for all symbols
Remove #ifdef around header includes
functions - name all parameters
variables rename reserved words (catch, final, new, not, private, protected, public, template, this, try, virtual)
gcc printf function checks
sort makefile lists (but not all)
drop pointless make targets

remove #if 0 (older than 1 year)
remove commented source (older than 1 year)
// -> /* */

split if (x = y() == z)
assigned / test pointers to NULL (not 0)
initialise all pointers
TRUE/FALSE → BOOL return [01]; 752 occurrences
bracket logic

doc switch drop-throughs

functions - move static before public
	reduce / remove need for forward declarations

clang-format

---------------------------------------
HIGH IMPACT / HIGH EFFORT / CONTENTIOUS

--------------------------------------------------------------------------------

Comments
	// → /* ... */
	fix block comments too

Whitespace
	trailing
	tabs
		leading
		embedded
		comments
	align = (

Brackets space(space
Bang space!spaceVAR
Brace: kernel cuddle?  always around if/else etc

case brace {} check scopes

static functions -- all declared?

if's bracket anything more complex that ARG or !ARG
	maths too

grammar: it's don't can't, spelling 's
	codespell

Tidying actions

Comments on
	functions
	block
	removal of junk comments

Indent
	our source files
	our functions in mutt source files
	our code lines in mutt functions

Indent
	tabs
	brackets whitespace
	brackets around complex logic
	braces, functions, if/while/etc, struct/enum/etc
	function definitions
		name parameters
	align =
	pointers X *x, !x
	trailing whitespace

Functions
	name consistently
	reorder, static then public
	name params sensibly

Unused
	remove structs
	remove params
	remove functions
	#if 0
	#include

Checks
	Init vars
	check pointers/all params
	retvals BOOL, compare with if (!fn())
	if ((x = y()) == NULL)
	logic if (x + y > 6)
	maths spacing _+_
	reserved words: new, this, etc

Make all lists derive from
	LIST *next
	or
	DLIST *next, *prev

init all vars
lots of static fns → _fn_name?
Doxygen comments
	# for enums, #defines, etc to link them

strict compilation flags; c++ compiler?
unnamed args in function prototypes
spurious \ line endings (in middle of if!)

check for unused #include
sort includes <>, ""

kill one-line if's:
	if (adsfa) command;

~50 lines of commented out source
	/* ... ; */

cleanup:
	docs - in code and html
	comments
	whitespace
		unfold lines
		indent
		rebracket
		refold
	sort options in
		globals.h
		functions.h
		switches
	doc switch drop-throughs

check all headers #include requisites for compilation
	iwyu

sensible retvals on functions

code: switch default must be at end

BOOL -> enum? no bool
what about the bitfields? bool too

should static functions be called mutt_*?
check minor new functions are static

tidy - check files for leading/trailing whitespace at ends of file
	check for redundant empty lines

lots of preprocessor symbols that use #if on undefined symbols
	warning: "DEBUG" is not defined [-Wundef]
	warning: "HAVE_DB4" is not defined [-Wundef]
	warning: "HAVE_GDBM" is not defined [-Wundef]
	warning: "HAVE_QDBM" is not defined [-Wundef]
	warning: "SYS_SIGLIST_DECLARED" is not defined [-Wundef]
	warning: "USE_UNLOCKED_IO" is not defined [-Wundef]
	warning: "_STRING_ARCH_unaligned" is not defined [-Wundef]
	warning: "__alpha" is not defined [-Wundef]
	warning: "__sun__" is not defined [-Wundef]

macros() should be MACROS()

check everyone's using mutt_file_fopen(), mutt_file_fclose(), etc

rename safe_X(**ptr) to X_null?
	safe_free -> free_null (**ptr)
		-> free_n ()
		-> n_free ()
		-> free_and_null ()

change prototypes for the X_and_NULL macros
	free() doesn't take a double pointer, so
	FREE() shouldn't
	rule of least surprise

try to reduce the scope of all variables
	too many variables are declared at the start of a function
	when they only get used in an if/for/while loop

#define mutt_new_header() safe_calloc (1, sizeof (HEADER))
	et al ought to cast their returns to the correct type

lots of pointers being assigned to 0
	unsigned char *pending_exact = 0;
        should be NULL

wiki coding style:
	indent, {}s, ()s, function defs, examples of correct

clang all my code + fix warnings

mvprintw unused?

purge all macros from neomutt?

sizeof(x) vs sizeof x

drop #if HAVE_CONFIG_H / #endif around #include "config.h"
	it's a compulsory part of our build

mutt_new_header() -> safe_*
	because it can't fail?

#defines → enums?

check minors for () -> (void)

find untranslated strings, i.e. missing _()
	mutt -v output is missing some

rename variables to be sensible

test iwyu - include what you use

If the name of a function is an action or an imperative command, the
function should return an error-code integer.  If the name is a
predicate, the function should return a "succeeded" boolean.

ERR_PTR return mechanism
Typical examples would be functions that return pointers; they use NULL
or the ERR_PTR mechanism to report failure

guide missing:
if (x = fn() == 0)

prototypes need arg *names*
p = alloc(sizeof (*p)) (not sizeof(TYPE))
x = y = value?
use mutt_*, safe_*, check_sec.sh

return statement should be simple
	return token
	return (token > 42);

meaning of: (account.c)
	return a1->flags & MUTT_ACCT_USER && a1->user[0] ? 0 : 1;

eliminate 1-letter function args?

review #165, #224 - check nothing's been missed in coding std

don't use variable
	'l' looks like 1
	'O' looks like 0

set outparams before function call
	x = 0;
	function(&x);

subst __func__ into mutt_debug calls
subst __FILE__, __LINE__ into ALL mutt_debug calls

distinguish between 0 (zero) and NUL '\0' ?

/*<space>comment<space>*/
	tidy and more greppable

XXX: 32
FIXME: 11

init.c strings "yes", "no", "ask-yes", "ask-no" -- define centrally

look for complex if/for/while/do loops without {}s
^\(\s\+\)if (.*\n\(\1  \+[^{]\+\)\+\n\1  \S/
^\(\s\+\)\(else \)*if (.*\n\(\1  \+[^{]\+\)\+\n\1  \S/
^\(\s\+\)\(while\|for\|do\|if\) (.*\n\(\1  \+[^{;]\+\)\+\n\1  \S/

style guide
	STAILQ_FOREACH
	always use {}
	otherwise clang-format gets upset

add style GUIDELINE to add const where possible

style:
	F9 unused parameters should be unnamed
	Enum.5: Don't use ALL_CAPS for enumerators
	Enum.6: Avoid unnamed enumerations

static functions with leading _
	add to style guide

write REQUIREMENTS doc
	C99
	SUS (Single Unix Specification)
	NotMuch >= 4.3.0
	etc

coding standard: two copies
	part 1:
		full descriptions
		examples
		anchors <a name="">
	part 2:
		auto-generated (script or jekyll)
		concise list + links to full examples
alternative, have coding standard in _std dir
	pieced together by jekyll for both versions

find remaining snake_case globals and replace them

if a struct has a X_free() it must have a X_alloc()
	check all allocs are *C*alloc

tagged initialisers -> coding standard
variable length arrays -> are they safe?

check the contents of NONULL for expensive calls
	#define NONULL(x) (x ? x : "")
	'x' evaluated twice

FOREACH should we always use _SAFE if we REMOVE (just for future safety)

all functions that return int
	`if (!fn())` should be `if (fn() == X)`

code style
	allow if (!X) for flags too
	if (!(flag & NAME))

style guide
	note which rules can be automated by
	clang-format, uncrustify

flags
	add to style guide
	positive
		if ((flags & MUTT_CM_NOHEADER))
	negative
		if (!(flags & MUTT_CM_NOHEADER))
		if ((flags & MUTT_CM_NOHEADER) == 0)

	move flags before struct's use of them

	naming?
		STATE_FLAGS
		state_flags
		state_flags_t
		StateFlags

style guide
	typedef has two possible comments
	a block for a typedef'd function, with @param
		named X_t
	single line for typedef'd flags

struct ZZZAccountData - ZZZ-specific Account data - @extends Account
struct ZZZEmailData - ZZZ-specific Email data - @extends Email
struct ZZZMboxData - ZZZ-specific Mailbox data - @extends Mailbox

