librender

(see also pager2.txt)

how to markup a line of text?
what about wrapped lines?

sidebar - lots of short lines
all applicable colours applied
lowest priority first
	NORMAL, ORDINARY, ... FLAGGED, OPEN, HIGHLIGHT

ColourText object accumulating stuff
/colour or /render library independent of neomutt
curses can render a CT object
CT knows how to merge colours/attrs
	fg overwrites fg
	bg overwrites bg
	attrs accumulate

e.g.
	"  ", Colour*, "boxname"
	CT 1 string, "  boxname"
	   1 ColourOffset { Colour, size_t, size_t }

Pager text - reading from file
	encoded, e.g. quoted printable
	"~~~~~<Cr>~~~~~"
How much text is cached as we process?
Where are the regexes anchored?
	Beginning of line?
	Start of body?
Is entire body in memory?  Probably
Parse into list of Segment pointers
Seg { startptr, len, colour }
Special Segs for <CR> (might not match screen)
Array of Line's
Recalc on SIGWINCH
Line is a collection of Segs or
Line is { num, seg idx, seg idx }
Easy to page up/down

When matching colour regex against line
match earliest, then greediest? OR
match 1 by 1 ∀ matches, even if they overlap

create regex shortcut '\s'
expand to [ \t\f\r\n]
see if it can match across line boundaries

Does mutt have a vim-like breakat option?
Which options should we mirror?

Raw text contains very long link
Quoted printable email
when email is rendered, current page only shows end of link

Decoded into memory
contains hard CRs
Regex whitespace munged
One Seg created ∀ text
∀ regex match against decoded
∀ match split Seg insert Colour

Apply line splitting according to wrapping rules
Insert <CR> or "+" etc as necessary

∀ Line call DisplayLine()

One regex has URI attr
Even though split each Seg knows complete URI

DisplayLine knows colours, attrs, text

Which layers do which splitting?
Is pager given encoded or decoded text?
	decoded

How much rendering is Neo-independent?
temp file is *decoded*
weeding is done before
toggle weeding -> recreate tmp file close/open pager

email headers - who does the folding to fit on screen?
How many Segs will be needed for 1 char wide screen?
are headers wrapped independently of text?
have min width of 10, or 20, chars?
to match regexes, headers need unwrapping
rendering header, respect "ignore" & hide some

librender - store colours/attrs/highlighting
parse colourscheme file
create markup objs using text, regexes, colours, attrs flags, width
not flags, config
	wrap width, smartwrap, breakat, linebreak, showbreak

too complicated?  break up

text + regex + colour -- apply_regex_colour()
	creates lots of Segs
line_split(text, options) -> more Segs
What about headers?

line breaks need finding, but not printing
resizing window doesn't regenerate tmp file

weeded headers could be present but not shown
same mechanism could be used for folding and <toggle-quoted>?
	hide signature?

flag the nature of each line:
	text, header, signature, quote, quote1,2,3.., PGP header
	search match, mime headers, weed header

after initial parsing call out to plugin parsers, e.g.
	.signature identifier
	markdown highlighter
	diff highlighter
implement as .so's with a simple API

plugins might want to define new highlight names, e.g.
	markdown_header1
we should accept some unknown names, or let plugin define them

if plugin defines colour items, then colour scheme would *have*
to be loaded after the plugin.  after config.  tricky
or give the plugins a class of names for colour items
	P_*
	P_MarkdownHeader1

plugin might suggest that a line shouldn't be wrapped (e.g. diff)

permanent markup
	hard CR
	header/pgp/mime
	syntax: diff, markdown, urls addresses, quoting, .sig, strings?

temporary markup
	soft Cr
	search matches

how to separate permanent from temporary?

resize doesn't happen often
	=> complete rebuild when necessary
search changes often
	=> keep separate

search could have *multiple* matches *spanning* lines
(only when search regex improved)

address plugin can ref address book to highlight accordingly

do we want a *semantic* parsing of the headers?
so others can process more easily?

plugins could have read-only access to config
	except sensitive

header plugin - read until '^$'
	match addresses against addrbook
	dates (any format)
	IP(v6)
	weed (vs not)
	mailing list
use config for header matches?

ignore/unignore should trigger a redisplay of headers
(if visible).  This will affect the line numbers and
position of the view in the pager
	"ignore" plugin?
	after "header" plugin

header plugin could zebra-stripe the fields odd/even
continuation lines are grouped with parent (and have link
to parent?  costly, space-wasting, not really needed

plugins could add/remove lines
	squash empty, delete .sig
	add whitelines for clarity

markdown plugin - hide #'s for headers?
	convert lists to unicode ●, ○, etc
	use bold, italic, url, etc
	use line-drawing chars to render tables

smiley plugin :-) -> 😄
	config lookup table

continuation headers. don't include leading space
	just flag them, let display choose what to do

toggling weed causes pgp sig to be rechecked!

weed and unignore aren't consistent

!weed => headers as in original email
	hard wrapped @ ~80 chars, indent 8
	soft wrapped (on narrow screen), no indent

unignore* - headers unwrapped
	hard wrapped to *screen* width
	soft wrapped (on narrow screen), no indent

decode email to file, unwrap all headers (however long)
	de-mime it.

header plugin could make collective decisions
if header X is *present*, then highlight all Y

lua binding for render plugins

vim has "nocombine" attr
	it means use these attrs ignoring any base attrs

pager plugins:
	init function -- allow them to cache config
	event function -- notify on config/colour change
	clenaup function -- clean up

pager has array of Lines, each with a default colour (cid)
	colour observer could use this to determine whether
	a colour change event is relevant or not

