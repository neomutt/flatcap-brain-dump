Server emails

    |   ID | Subject    | Labels   | Body [Structure]                | Bytes | Lines |
    |-----:+:-----------+:---------+:--------------------------------+------:+------:|
    | 1001 | Apple      | red      | [platea nullam magna]           |  1295 |    37 |
    | 1002 | Banana     | blue     | [class risus] [metus turpis]    | 25124 |   425 |
    | 1003 | Cherry     | red,blue | [mollis elit iaculis amet]      | 32749 |  1056 |
    | 1004 | Damson     | blue     | [mollis [torquent] proin]       | 15357 |   239 |
    | 1005 | Elderberry | red,blue | [nibh suscipit iaculis]         | 19732 |   313 |
    | 1006 | Fig        |          | [urna cras] [viverra]           | 13888 |   175 |
    | 1007 | Guava      | red,blue | [massa quisque senectus]        | 18067 |   669 |
    | 1008 | Hawthorn   | red      | [fames] [orci] [lacinia] [urna] | 22480 |   702 |
    | 1009 | Ilama      | blue     | [sagittis nunc elit]            | 25634 |   346 |
    | 1010 | Jackfruit  | red,blue | [inceptos platea rhoncus]       |  2473 |    43 |

Cache
    [EMPTY]

================================================================================

UI list_folder(ID|SUBJ, []) -> MxAPI
MxAPI -> imap.list(ID|SUBJ, [])
imap returns email list to MxAPI

Objects
    |   ID | Subject    |
    |-----:+:-----------|
    | 1001 | Apple      |
    | 1002 | Banana     |
    | 1003 | Cherry     |
    | 1004 | Damson     |
    | 1005 | Elderberry |
    | 1006 | Fig        |
    | 1007 | Guava      |
    | 1008 | Hawthorn   |
    | 1009 | Ilama      |
    | 1010 | Jackfruit  |

MxAPI saves to cache

Cache
    |   ID | Subject    | Labels | Body [Structure] | Bytes | Lines |
    |-----:+:-----------+:-------+:-----------------+------:+------:|
    | 1001 | Apple      | -      | -                |     - |     - |
    | 1002 | Banana     | -      | -                |     - |     - |
    | 1003 | Cherry     | -      | -                |     - |     - |
    | 1004 | Damson     | -      | -                |     - |     - |
    | 1005 | Elderberry | -      | -                |     - |     - |
    | 1006 | Fig        | -      | -                |     - |     - |
    | 1007 | Guava      | -      | -                |     - |     - |
    | 1008 | Hawthorn   | -      | -                |     - |     - |
    | 1009 | Ilama      | -      | -                |     - |     - |
    | 1010 | Jackfruit  | -      | -                |     - |     - |

UI displays index [ABCDEFGHIJ]

================================================================================

UI limits to "~s ^[A-E].*"
UI wants (ID|SUBJ) and all the emails already match
UI displays index [ABCDE]

================================================================================

UI opens email 1003
UI wants (ID|SUBJ|BODY), but email doesn't have it
UI list_folder(ID|SUBJ, [1003]) -> MxAPI
MxAPI -> imap.list(ID|SUBJ, [1003])
imap returns email list to MxAPI (plus more unbidden info)

Objects
    | ID   | Subject | Body [Structure]           | Bytes | Lines |
    |------+---------+----------------------------|------:+------:|
    | 1003 | Cherry  | [mollis elit iaculis amet] | 32749 |  1056 |

MxAPI saves email to cache

Cache
    |   ID | Subject    | Labels | Body [Structure]           | Bytes | Lines |
    |-----:+:-----------+:-------+:---------------------------+------:+------:|
    | 1001 | Apple      | -      | -                          |     - |     - |
    | 1002 | Banana     | -      | -                          |     - |     - |
    | 1003 | Cherry     | -      | [mollis elit iaculis amet] | 32749 |  1056 |
    | 1004 | Damson     | -      | -                          |     - |     - |
    | 1005 | Elderberry | -      | -                          |     - |     - |
    | 1006 | Fig        | -      | -                          |     - |     - |
    | 1007 | Guava      | -      | -                          |     - |     - |
    | 1008 | Hawthorn   | -      | -                          |     - |     - |
    | 1009 | Ilama      | -      | -                          |     - |     - |
    | 1010 | Jackfruit  | -      | -                          |     - |     - |

UI displays email [C]

================================================================================

UI sets index_format=%X (attachment count) => STRUCT
UI already has the info for one email
UI list_folder(ID|SUBJ|STRUCT, [ABDE])
MxAPI -> imap.list(ID|SUBJ, [ABDE])
imap returns email list to MxAPI

Objects
    |   ID | Subject    | [Structure] |
    |-----:+:-----------+-------------+
    | 1001 | Apple      | []          |
    | 1002 | Banana     | [] []       |
    | 1004 | Damson     | [[]]        |
    | 1005 | Elderberry | []          |

MxAPI saves emails to cache

Cache
    |   ID | Subject    | Labels | Body [Structure]           | Bytes | Lines |
    |-----:+:-----------+:-------+:---------------------------+------:+------:|
    | 1001 | Apple      | -      | []                         |     - |     - |
    | 1002 | Banana     | -      | [] []                      |     - |     - |
    | 1003 | Cherry     | -      | [mollis elit iaculis amet] | 32749 |  1056 |
    | 1004 | Damson     | -      | [[]]                       |     - |     - |
    | 1005 | Elderberry | -      | []                         |     - |     - |
    | 1006 | Fig        | -      | -                          |     - |     - |
    | 1007 | Guava      | -      | -                          |     - |     - |
    | 1008 | Hawthorn   | -      | -                          |     - |     - |
    | 1009 | Ilama      | -      | -                          |     - |     - |
    | 1010 | Jackfruit  | -      | -                          |     - |     - |

UI displays attachment count

================================================================================

UI limits to "all"
UI wants (ID|SUBJ|STRUCT) and five emails already match
UI list_folder(ID|SUBJ|STRUCT, [FGHIJ]) -> MxAPI
MxAPI -> imap.list(ID|SUBJ|STRUCT, [FGHIJ])
imap returns email list to MxAPI

Objects
    |   ID | Subject   | [Structure] |
    |-----:+:----------+-------------|
    | 1006 | Fig       | [][]        |
    | 1007 | Guava     | []          |
    | 1008 | Hawthorn  | [][][][]    |
    | 1009 | Ilama     | []          |
    | 1010 | Jackfruit | []          |

MxAPI saves emails to cache

Cache
    |   ID | Subject    | Labels | Body [Structure]           | Bytes | Lines |
    |-----:+:-----------+:-------+:---------------------------+------:+------:|
    | 1001 | Apple      | -      | []                         |     - |     - |
    | 1002 | Banana     | -      | [] []                      |     - |     - |
    | 1003 | Cherry     | -      | [mollis elit iaculis amet] | 32749 |  1056 |
    | 1004 | Damson     | -      | [[]]                       |     - |     - |
    | 1005 | Elderberry | -      | []                         |     - |     - |
    | 1006 | Fig        | -      | [][]                       |     - |     - |
    | 1007 | Guava      | -      | []                         |     - |     - |
    | 1008 | Hawthorn   | -      | [][][][]                   |     - |     - |
    | 1009 | Ilama      | -      | []                         |     - |     - |
    | 1010 | Jackfruit  | -      | []                         |     - |     - |

UI displays index [ABCDEFGHIJ] with attachment count

================================================================================

Notes:

inline hcache?  or T-junction?
	mx -> cache -> mailbox
or
	mx -> cache
	   -> mailbox
inline => cache uses MX api

flags for every feature that's get-able

some mailbox features
	list mboxes
	get subscriptions
	mbox has new
	mbox list emails

--------------------------------------------------------------------------------

inline hcache or T-junction?
	mx -> hc -> mbox
or
	mx -> hc
	|
	V
	mbox

flags for every feature that's get-table
some mailbox features
	list mailboxes
	get subscriptions
	mailbox has new
	mailbox list emails
timestamp hcache entries - update entries as nec
index features: size, subject, structure/attach/body

----------------------------------------
1 = mbox
2 = maildir
3 = imap
4 = pop
5 = nntp

get header
	1) parse header
	2) parse header
	3) get header
	4) get whole
	5) get header

get struct
	1,2,4,5) get whole
	3) body struct

----------------------------------------

index -> header, %X attach -> bodystruct, ~b full
expr in body
	~b EXPR
	=b STR (server)
expr in whole message
	~B EXPR
	=B STR (server)
expr in header
	~h EXPR
	=h STR (server)
gmail
	=/ STR

might need to merge header and body cache
	but still store them separately

demand loading of emails?  what about neo's sorting?
	load pages: 0,1,2,3,$ and around cursor
	what about searching?

mxapi: merge(Hdr *old, Hdr *new)
timestamp hc entries, mx-specific timeout?
mbox *notifies* as each request is fulfilled -- ui updates
flag on objects "cached" unset on change -> mx can update cache
separate flags:
	*have* ID|SUBJECT
	*updated* LABEL
if UI updates, mx can't cache *until* mailbox returns OK
mailbox can notify on commit, too, UI knows which are safe

---

missing from diagram
	ncrypt
	complete
	progress
	charsets
	keybindings
	attrs
	compress
	menu api

separate in diagram
	caches
	mailboxes
	neo UI
	mx,msg,tags

MXAPI
	mailbox - open, close...
	message - open, close...
	browser - list, parent
	completion - list matches
	addrbook - alias, query

header cache
	identify saved fields, move others to the end
	drop #ifdef, assume present

context data
	nntp, imap, mh, pop

browser applies to
	mailboxes, contacts, keys

mx
	login api: user, pass, domain, path
	discovery api: folder tree
	skeleton/header } download
	body/full       } flags for which we already have

compress
	use hdr *data* for *child* header?
	kill compress info
	no *context*, not *header*
	nested contexts?
	same with notmuch+maildir

hcache users (off by default)
	imap
	nntp
	pop
	notmuch
	maildir

hcache
	is it affected by changes to config.h?
	elimininate #ifdefs, *fix* sizes
	what the largest possible hc code object size?

need to touch up objects after cache retrieval! (POP)

notmuch is stacked (like compress)

