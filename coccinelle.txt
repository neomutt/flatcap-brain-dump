initialise pointers to NULL
	avoid static
	avoid extern
	cope with multiple definitions

remove mutt-isms (use sed?)
	FOREVER
	__FREE_CHECKED__

check arguments in prototypes have names

refactor assigment-test in conditional
	if (x = fn(y) == NULL)

check coding standard for ideas

add params for neo functions

test pointers against NULL, not 0
test char against '\0' not 0?
sizeof X -> sizeof(x)

mass rename of lots of structs in one cocci file?
	identifier x ~= "\(BUFFER\|ENVELOPE\)"

add to travis, non-failing error

transform upstream dprint -> mutt_debug
	arg rearrange

if (return) else something();
	drop else, unindent clause
	check for: return, break, continue, goto

github override:
	// vim: set filetype=diff:
	// -*- diff -*-

functions: imap_sync_mailbox imap_check_mailbox
	index_hint isn't used (in default)

remove cast before calloc, etc
	tmp = (struct Alias *) safe_calloc(1, sizeof(struct Alias));

sizeof(*var) instead of sizeof(type)
	tmp = safe_calloc(1, sizeof(struct QClass));

any
	TYPE *x = (TYPE*) SOME_VOID_THING

if return *else* or swap
	or break, continue, goto

dprint -> mutt_debug + argfix

copyright headers, license file

mutt_error _() et al, break scripts
clang with 9999, then sed first?

test --include option

fix order of params for {safe_,}calloc()

